{"version":3,"sources":["/Users/albaortegaflores/Documentos/TFM/code/web/node_modules/@angular-material-extensions/password-strength/fesm2015/angular-material-extensions-password-strength.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2FAwBE;;;oEAGkE,AAQ/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kMAiNnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wEAuCsE,AASvC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;eA8D/B;;;;;;;;;;;;;;;;;;;;;;;;8EAwB4E,AA4DzC;;;;;;;;;;;;;;;;;;EAUnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAsB4B","file":"angular-material-extensions-password-strength.js","sourcesContent":["import { __decorate } from 'tslib';\nimport { Input, Component, ViewEncapsulation, EventEmitter, Output, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FormControl, Validators } from '@angular/forms';\nimport { animation, style, animate, keyframes, trigger, transition, query, stagger, animateChild, useAnimation } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatRippleModule } from '@angular/material/core';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatIconModule } from '@angular/material/icon';\n\nvar Colors;\n(function (Colors) {\n    Colors[\"primary\"] = \"primary\";\n    Colors[\"accent\"] = \"accent\";\n    Colors[\"warn\"] = \"warn\";\n})(Colors || (Colors = {}));\n\nvar Criteria;\n(function (Criteria) {\n    Criteria[\"at_least_eight_chars\"] = \"minChar\";\n    Criteria[\"at_least_one_lower_case_char\"] = \"lowerCase\";\n    Criteria[\"at_least_one_upper_case_char\"] = \"upperCase\";\n    Criteria[\"at_least_one_digit_char\"] = \"digit\";\n    Criteria[\"at_least_one_special_char\"] = \" specialChar\";\n    Criteria[\"at_custom_chars\"] = \"customChars\";\n})(Criteria || (Criteria = {}));\n\nlet MatPassToggleVisibilityComponent = class MatPassToggleVisibilityComponent {\n    constructor() {\n        this._type = 'text';\n    }\n    get type() {\n        return this.isVisible ? 'text' : 'password';\n    }\n};\n__decorate([\n    Input()\n], MatPassToggleVisibilityComponent.prototype, \"isVisible\", void 0);\nMatPassToggleVisibilityComponent = __decorate([\n    Component({\n        selector: 'mat-pass-toggle-visibility',\n        template: \"<button (click)=\\\"isVisible = !isVisible\\\"\\n        type=\\\"button\\\"\\n        class=\\\"mat-icon-button cdk-focused cdk-mouse-focused\\\" mat-icon-button\\n        matRippleCentered=\\\"true\\\"\\n        matRipple>\\n  <mat-icon>{{isVisible ? 'visibility' : 'visibility_off' }}</mat-icon>\\n</button>\\n\\n\",\n        encapsulation: ViewEncapsulation.None,\n        styles: [\"\"]\n    })\n], MatPassToggleVisibilityComponent);\n\nclass MatPasswordStrengthValidator {\n    isUndefinedOrEmpty(control) {\n        if (!control || !control.value || control.value.length === 0) {\n            return undefined;\n        }\n    }\n    validate(criteria, regex) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (!regex.test(control.value)) {\n                const failed = {};\n                failed[criteria] = {\n                    actualValue: control.value,\n                    requiredPattern: regex\n                };\n                return failed;\n            }\n            return undefined;\n        };\n        return validator;\n    }\n    confirm(password) {\n        const validator = (control) => {\n            this.isUndefinedOrEmpty(control);\n            if (control.value !== password) {\n                return {\n                    notConfirmed: {\n                        password: password,\n                        passwordConfirmation: control.value\n                    }\n                };\n            }\n            return undefined;\n        };\n        return validator;\n    }\n}\n\nconst RegExpValidator = {\n    'lowerCase': RegExp(/^(?=.*?[a-z])/),\n    'upperCase': RegExp(/^(?=.*?[A-Z])/),\n    'digit': RegExp(/^(?=.*?[0-9])/),\n    'specialChar': RegExp(/^(?=.*?[\" !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\"])/),\n};\n\nlet MatPasswordStrengthComponent = class MatPasswordStrengthComponent {\n    constructor() {\n        this.enableLengthRule = true;\n        this.enableLowerCaseLetterRule = true;\n        this.enableUpperCaseLetterRule = true;\n        this.enableDigitRule = true;\n        this.enableSpecialCharRule = true;\n        this.min = 8;\n        this.max = 30;\n        this.warnThreshold = 21;\n        this.accentThreshold = 81;\n        this.onStrengthChanged = new EventEmitter();\n        this.criteriaMap = new Map();\n        // TO ACCESS VIA CONTENT CHILD\n        this.passwordFormControl = new FormControl();\n        this.passwordConfirmationFormControl = new FormControl();\n        this.validatorsArray = [];\n        this._strength = 0;\n        this.matPasswordStrengthValidator = new MatPasswordStrengthValidator();\n    }\n    ngOnInit() {\n        this.setRulesAndValidators();\n        if (this.password) {\n            this.calculatePasswordStrength();\n        }\n    }\n    ngOnChanges(changes) {\n        if ((changes.externalError && changes.externalError.firstChange) || changes.password.isFirstChange()) {\n            return;\n        }\n        else if (changes.externalError && changes.externalError.currentValue) {\n            this._color = Colors.warn;\n            return;\n        }\n        else if (changes.password.previousValue === changes.password.currentValue && !changes.password.firstChange) {\n            this.calculatePasswordStrength();\n        }\n        else {\n            this.password && this.password.length > 0 ?\n                this.calculatePasswordStrength() : this.reset();\n        }\n    }\n    get strength() {\n        return this._strength ? this._strength : 0;\n    }\n    get color() {\n        if (this._strength < this.warnThreshold) {\n            return Colors.warn;\n        }\n        else if (this._strength < this.accentThreshold) {\n            return Colors.accent;\n        }\n        else {\n            return Colors.primary;\n        }\n    }\n    _containAtLeastMinChars() {\n        this.containAtLeastMinChars = this.password.length >= this.min;\n        return this.containAtLeastMinChars;\n    }\n    _containAtLeastOneLowerCaseLetter() {\n        this.containAtLeastOneLowerCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_lower_case_char)\n                .test(this.password);\n        return this.containAtLeastOneLowerCaseLetter;\n    }\n    _containAtLeastOneUpperCaseLetter() {\n        this.containAtLeastOneUpperCaseLetter =\n            this.criteriaMap\n                .get(Criteria.at_least_one_upper_case_char)\n                .test(this.password);\n        return this.containAtLeastOneUpperCaseLetter;\n    }\n    _containAtLeastOneDigit() {\n        this.containAtLeastOneDigit =\n            this.criteriaMap\n                .get(Criteria.at_least_one_digit_char)\n                .test(this.password);\n        return this.containAtLeastOneDigit;\n    }\n    _containAtLeastOneSpecialChar() {\n        this.containAtLeastOneSpecialChar =\n            this.criteriaMap\n                .get(Criteria.at_least_one_special_char)\n                .test(this.password);\n        return this.containAtLeastOneSpecialChar;\n    }\n    _containCustomChars() {\n        this.containAtCustomChars =\n            this.criteriaMap\n                .get(Criteria.at_custom_chars)\n                .test(this.password);\n        return this.containAtCustomChars;\n    }\n    parseCustomValidatorsRegex(value = this.customValidator) {\n        if (this.customValidator instanceof RegExp) {\n            return this.customValidator;\n        }\n        else if (typeof this.customValidator === 'string') {\n            return RegExp(this.customValidator);\n        }\n    }\n    setRulesAndValidators() {\n        this.validatorsArray = [];\n        this.criteriaMap = new Map();\n        this.passwordConfirmationFormControl\n            .setValidators(Validators.compose([\n            Validators.required, this.matPasswordStrengthValidator.confirm(this.password)\n        ]));\n        this.validatorsArray.push(Validators.required);\n        if (this.enableLengthRule) {\n            this.criteriaMap.set(Criteria.at_least_eight_chars, RegExp(`^.{${this.min},${this.max}}$`));\n            this.validatorsArray.push(Validators.minLength(this.min));\n            this.validatorsArray.push(Validators.maxLength(this.max));\n        }\n        if (this.enableLowerCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_lower_case_char, RegExpValidator.lowerCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.lowerCase));\n        }\n        if (this.enableUpperCaseLetterRule) {\n            this.criteriaMap.set(Criteria.at_least_one_upper_case_char, RegExpValidator.upperCase);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.upperCase));\n        }\n        if (this.enableDigitRule) {\n            this.criteriaMap.set(Criteria.at_least_one_digit_char, RegExpValidator.digit);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.digit));\n        }\n        if (this.enableSpecialCharRule) {\n            this.criteriaMap.set(Criteria.at_least_one_special_char, RegExpValidator.specialChar);\n            this.validatorsArray.push(Validators.pattern(RegExpValidator.specialChar));\n        }\n        if (this.customValidator) {\n            this.criteriaMap.set(Criteria.at_custom_chars, this.parseCustomValidatorsRegex());\n            this.validatorsArray.push(Validators.pattern(this.parseCustomValidatorsRegex()));\n        }\n        this.criteriaMap.forEach((value, key) => {\n            this.validatorsArray.push(this.matPasswordStrengthValidator.validate(key, value));\n        });\n        this.passwordFormControl.setValidators(Validators.compose([...this.validatorsArray]));\n        this.Validators = Validators.compose([...this.validatorsArray]);\n    }\n    calculatePasswordStrength() {\n        const requirements = [];\n        const unit = 100 / this.criteriaMap.size;\n        // console.log('this.criteriaMap.size = ', this.criteriaMap.size);\n        // console.log('unit = ', unit);\n        requirements.push(this.enableLengthRule ? this._containAtLeastMinChars() : false, this.enableLowerCaseLetterRule ? this._containAtLeastOneLowerCaseLetter() : false, this.enableUpperCaseLetterRule ? this._containAtLeastOneUpperCaseLetter() : false, this.enableDigitRule ? this._containAtLeastOneDigit() : false, this.enableSpecialCharRule ? this._containAtLeastOneSpecialChar() : false, this.customValidator ? this._containCustomChars() : false);\n        this._strength = requirements.filter(v => v).length * unit;\n        // console.log('length = ', this._strength / unit);\n        this.onStrengthChanged.emit(this.strength);\n        this.setRulesAndValidators();\n    }\n    reset() {\n        this._strength = 0;\n        this.containAtLeastMinChars =\n            this.containAtLeastOneLowerCaseLetter =\n                this.containAtLeastOneUpperCaseLetter =\n                    this.containAtLeastOneDigit =\n                        this.containAtCustomChars =\n                            this.containAtLeastOneSpecialChar = false;\n    }\n};\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"password\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"externalError\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"enableLengthRule\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"enableLowerCaseLetterRule\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"enableUpperCaseLetterRule\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"enableDigitRule\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"enableSpecialCharRule\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"min\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"max\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"customValidator\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"warnThreshold\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthComponent.prototype, \"accentThreshold\", void 0);\n__decorate([\n    Output()\n], MatPasswordStrengthComponent.prototype, \"onStrengthChanged\", void 0);\nMatPasswordStrengthComponent = __decorate([\n    Component({\n        selector: 'mat-password-strength',\n        exportAs: 'matPasswordStrength',\n        template: \"<mat-progress-bar mode=\\\"determinate\\\"\\n                  [color]=\\\"color\\\"\\n                  [value]=\\\"strength\\\">\\n</mat-progress-bar>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".green :host::ng-deep .mat-progress-bar.mat-primary .mat-progress-bar-fill::after{background-color:#43a047}\"]\n    })\n], MatPasswordStrengthComponent);\n\nfunction flipIn(timing, rotateX, rotateY) {\n    const params = { timing: timing, delay: 0, rotateX, rotateY };\n    return animation([\n        style({ 'backface-visibility': 'visible' }),\n        animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n            style({\n                opacity: 0,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                offset: 0,\n            }),\n            style({\n                opacity: 1,\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                offset: 0.4,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                offset: 0.6,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                offset: 0.8,\n            }),\n            style({\n                transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                offset: 1,\n            }),\n        ])),\n    ], { params });\n}\nconst flipInX = flipIn(1, 1, 0);\nconst flipInY = flipIn(1, 0, 1);\nconst shake = animation(animate('{{ timing }}s {{ delay }}s', keyframes([\n    style({ transform: 'translate3d(0, 0, 0)', offset: 0 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.1 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.2 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.3 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.4 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.5 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.6 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.7 }),\n    style({ transform: 'translate3d(10px, 0, 0)', offset: 0.8 }),\n    style({ transform: 'translate3d(-10px, 0, 0)', offset: 0.9 }),\n    style({ transform: 'translate3d(0, 0, 0)', offset: 1 }),\n])), { params: { timing: 1, delay: 0 } });\n\nlet MatPasswordStrengthInfoComponent = class MatPasswordStrengthInfoComponent {\n    constructor() {\n        this.enableScoreInfo = false;\n        this.lowerCaseCriteriaMsg = 'contains at least one lower character';\n        this.upperCaseCriteriaMsg = 'contains at least one upper character';\n        this.digitsCriteriaMsg = 'contains at least one digit character';\n        this.specialCharsCriteriaMsg = 'contains at least one special character';\n        this.customCharsCriteriaMsg = 'contains at least one custom character';\n    }\n    ngOnInit() {\n        if (!this.minCharsCriteriaMsg) {\n            this.minCharsCriteriaMsg = `contains at least ${this.passwordComponent.min} characters`;\n        }\n    }\n};\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"passwordComponent\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"enableScoreInfo\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"lowerCaseCriteriaMsg\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"upperCaseCriteriaMsg\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"digitsCriteriaMsg\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"specialCharsCriteriaMsg\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"customCharsCriteriaMsg\", void 0);\n__decorate([\n    Input()\n], MatPasswordStrengthInfoComponent.prototype, \"minCharsCriteriaMsg\", void 0);\nMatPasswordStrengthInfoComponent = __decorate([\n    Component({\n        selector: 'mat-password-strength-info',\n        exportAs: 'matPasswordStrengthInfo',\n        template: \"<mat-card @list>\\n  <mat-card-content>\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.enableLowerCaseLetterRule\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneLowerCaseLetter; then done else error\\\" @flipY>\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{lowerCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.enableUpperCaseLetterRule\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneUpperCaseLetter; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{upperCaseCriteriaMsg}}</span>\\n    </div>\\n\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.enableDigitRule\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneDigit; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{digitsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.enableSpecialCharRule\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastOneSpecialChar; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{specialCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.enableLengthRule\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtLeastMinChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{minCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div class=\\\"info-row\\\" @items *ngIf=\\\"passwordComponent.customValidator\\\">\\n      <div *ngIf=\\\"passwordComponent.containAtCustomChars; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>{{customCharsCriteriaMsg}}</span>\\n    </div>\\n\\n    <div *ngIf=\\\"enableScoreInfo\\\" class=\\\"info-row\\\" @items>\\n      <div *ngIf=\\\"passwordComponent.strength === 100; then done else error\\\">\\n      </div>\\n      <ng-template #done>\\n        <mat-icon @positiveState color=\\\"primary\\\">done</mat-icon>\\n      </ng-template>\\n      <ng-template #error>\\n        <mat-icon @negativeState color=\\\"warn\\\">error</mat-icon>\\n      </ng-template>\\n      <span>Password's strength = {{passwordComponent.strength}} %100</span>\\n    </div>\\n\\n  </mat-card-content>\\n</mat-card>\\n\",\n        animations: [\n            // nice stagger effect when showing existing elements\n            trigger('list', [\n                transition(':enter', [\n                    // child animation selector + stagger\n                    query('@items', stagger(300, animateChild()))\n                ]),\n            ]),\n            trigger('items', [\n                // cubic-bezier for a tiny bouncing feel\n                transition(':enter', [\n                    style({ transform: 'scale(0.5)', opacity: 0 }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(1)', opacity: 1 }))\n                ]),\n                transition(':leave', [\n                    style({ transform: 'scale(1)', opacity: 1, height: '*' }),\n                    animate('1s cubic-bezier(.8,-0.6,0.2,1.5)', style({ transform: 'scale(0.5)', opacity: 0, height: '0px', margin: '0px' }))\n                ]),\n            ]),\n            trigger('positiveState', [\n                transition(':enter', [\n                    style({ 'backface-visibility': 'visible' }),\n                    animate('{{ timing }}s {{ delay }}s ease-in', keyframes([\n                        style({\n                            opacity: 0,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 90deg)',\n                            offset: 0,\n                        }),\n                        style({\n                            opacity: 1,\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -20deg)',\n                            offset: 0.4,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, 10deg)',\n                            offset: 0.6,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d({{ rotateX }}, {{ rotateY }}, 0, -5deg)',\n                            offset: 0.8,\n                        }),\n                        style({\n                            transform: 'perspective(400px) rotate3d(0, 0, 0, 0)',\n                            offset: 1,\n                        }),\n                    ])),\n                ], { params: { timing: 1, delay: 0, rotateX: 1, rotateY: 0 } }),\n            ]),\n            trigger('negativeState', [\n                transition(':enter', useAnimation(shake)),\n            ]),\n        ],\n        styles: [\"mat-card{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;box-sizing:border-box;display:-webkit-box;display:flex;place-content:stretch center;-webkit-box-align:stretch;align-items:stretch;-webkit-box-flex:1;flex:1 1 0}mat-card mat-card-content{-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;box-sizing:border-box;display:-webkit-box;display:flex;max-width:100%;place-content:stretch flex-start;-webkit-box-align:stretch;align-items:stretch}mat-card mat-card-content mat-icon{margin-right:10px}mat-card mat-card-content .info-row{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;box-sizing:border-box;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}\"]\n    })\n], MatPasswordStrengthInfoComponent);\n\nvar MatPasswordStrengthModule_1;\nlet MatPasswordStrengthModule = MatPasswordStrengthModule_1 = class MatPasswordStrengthModule {\n    static forRoot() {\n        return {\n            ngModule: MatPasswordStrengthModule_1,\n            providers: []\n        };\n    }\n};\nMatPasswordStrengthModule = MatPasswordStrengthModule_1 = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            MatProgressBarModule,\n            MatCardModule,\n            MatIconModule,\n            MatRippleModule\n        ],\n        exports: [\n            MatPasswordStrengthComponent,\n            MatPasswordStrengthInfoComponent,\n            MatPassToggleVisibilityComponent\n        ],\n        declarations: [\n            MatPasswordStrengthComponent,\n            MatPasswordStrengthInfoComponent,\n            MatPassToggleVisibilityComponent\n        ],\n        entryComponents: [MatPassToggleVisibilityComponent]\n    })\n], MatPasswordStrengthModule);\n\n/*\n * Public API Surface of password-strength\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Colors, Criteria, MatPassToggleVisibilityComponent, MatPasswordStrengthComponent, MatPasswordStrengthInfoComponent, MatPasswordStrengthModule, MatPasswordStrengthValidator, RegExpValidator, flipIn, flipInX, flipInY, shake, shake as ɵa };\n"]}