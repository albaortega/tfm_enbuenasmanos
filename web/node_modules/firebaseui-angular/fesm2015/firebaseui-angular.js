import { __decorate, __metadata, __param } from 'tslib';
import { Injectable, EventEmitter, Inject, NgZone, Output, Component, NgModule } from '@angular/core';
import { AngularFireAuth } from '@angular/fire/auth';
import * as firebaseui$1 from 'firebaseui';
import { auth } from 'firebaseui';
import 'firebase/auth';
import * as firebaseOriginal from 'firebase/app';
import { CommonModule } from '@angular/common';

let FirebaseuiAngularLibraryService = class FirebaseuiAngularLibraryService {
    constructor(angularFireAuth) {
        // store the firebaseui instance on the window object to prevent double initialization
        if (!window.firebaseUiInstance) {
            window.firebaseUiInstance = new auth.AuthUI(angularFireAuth.auth);
        }
        this.firebaseUiInstance = window.firebaseUiInstance;
    }
};
FirebaseuiAngularLibraryService.ctorParameters = () => [
    { type: AngularFireAuth }
];
FirebaseuiAngularLibraryService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [AngularFireAuth])
], FirebaseuiAngularLibraryService);

var FirebaseuiAngularLibraryComponent_1;
let FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = class FirebaseuiAngularLibraryComponent {
    constructor(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this._firebaseUiConfig = _firebaseUiConfig;
        this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;
        this.ngZone = ngZone;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessWithAuthResultCallback = new EventEmitter(); // tslint:disable-line
        this.signInFailureCallback = new EventEmitter(); // tslint:disable-line
    }
    get firebaseUiConfig() {
        return Object.assign(Object.assign({}, this._firebaseUiConfig), this._firebaseUiConfig_Feature);
    }
    ngOnInit() {
        this.subscription = this.angularFireAuth.authState.subscribe((value) => {
            if ((value && value.isAnonymous) || !value) {
                if (this.firebaseUiConfig.signInOptions.length !== 0) {
                    this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    }
    ngOnDestroy() {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    getUIAuthConfig() {
        if (!this.firebaseUiConfig.callbacks) {
            this._firebaseUiConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS] = true;
            this._firebaseUiConfig.callbacks = this.getCallbacks();
        }
        return this.firebaseUiConfig;
    }
    firebaseUIPopup() {
        const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        const uiAuthConfig = this.getUIAuthConfig();
        // Check if callbacks got computed to reset them again after providing the to firebaseui.
        // Necessary for allowing updating the firebaseui config during runtime.
        let resetCallbacks = false;
        if (uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS]) {
            resetCallbacks = true;
            delete uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS];
        }
        // show the firebaseui
        firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);
        if (resetCallbacks) {
            this._firebaseUiConfig.callbacks = null;
        }
    }
    getCallbacks() {
        const signInSuccessWithAuthResult = (authResult, redirectUrl) => {
            this.ngZone.run(() => {
                this.signInSuccessWithAuthResultCallback.emit({
                    authResult,
                    redirectUrl
                });
            });
            return this.firebaseUiConfig.signInSuccessUrl;
        };
        const signInFailureCallback = (error) => {
            this.ngZone.run(() => {
                this.signInFailureCallback.emit({
                    code: error.code,
                    credential: error.credential
                });
            });
            return Promise.reject();
        };
        return {
            signInSuccessWithAuthResult: signInSuccessWithAuthResult,
            signInFailure: signInFailureCallback,
        };
    }
};
FirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';
FirebaseuiAngularLibraryComponent.ctorParameters = () => [
    { type: AngularFireAuth },
    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfig',] }] },
    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfigFeature',] }] },
    { type: NgZone },
    { type: FirebaseuiAngularLibraryService }
];
__decorate([
    Output('signInSuccessWithAuthResult'),
    __metadata("design:type", EventEmitter)
], FirebaseuiAngularLibraryComponent.prototype, "signInSuccessWithAuthResultCallback", void 0);
__decorate([
    Output('signInFailure'),
    __metadata("design:type", EventEmitter)
], FirebaseuiAngularLibraryComponent.prototype, "signInFailureCallback", void 0);
FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = __decorate([
    Component({
        selector: 'firebase-ui',
        template: '<div id="firebaseui-auth-container"></div>'
    }),
    __param(1, Inject('firebaseUIAuthConfig')),
    __param(2, Inject('firebaseUIAuthConfigFeature')),
    __metadata("design:paramtypes", [AngularFireAuth, Object, Object, NgZone,
        FirebaseuiAngularLibraryService])
], FirebaseuiAngularLibraryComponent);

/*
 * Created by Raphael Jenni
 * Copyright (c) 2017 Raphael Jenni
 */
const firebase = firebaseOriginal;
const firebaseui = firebaseui$1;
class FirebaseUISignInSuccessWithAuthResult {
}
class FirebaseUISignInFailure {
}

var FirebaseUIModule_1;
let FirebaseUIModule = FirebaseUIModule_1 = class FirebaseUIModule {
    static forRoot(firebaseUiAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },
                { provide: 'firebaseUIAuthConfigFeature', useValue: {} }
            ]
        };
    }
    static forFeature(firebaseUIAuthConfig) {
        return {
            ngModule: FirebaseUIModule_1,
            providers: [
                { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }
            ]
        };
    }
};
FirebaseUIModule = FirebaseUIModule_1 = __decorate([
    NgModule({
        imports: [
            CommonModule
        ],
        declarations: [FirebaseuiAngularLibraryComponent],
        providers: [FirebaseuiAngularLibraryService],
        exports: [FirebaseuiAngularLibraryComponent]
    })
], FirebaseUIModule);

/*
 * Public API Surface of firebaseui-angular-library
 */

/**
 * Generated bundle index. Do not edit.
 */

export { FirebaseUIModule, FirebaseUISignInFailure, FirebaseUISignInSuccessWithAuthResult, FirebaseuiAngularLibraryComponent, FirebaseuiAngularLibraryService, firebase, firebaseui };
//# sourceMappingURL=firebaseui-angular.js.map
