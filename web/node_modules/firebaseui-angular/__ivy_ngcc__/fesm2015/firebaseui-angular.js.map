{"version":3,"sources":["/Users/albaortegaflores/Documentos/TFM/code/web/node_modules/firebaseui-angular/fesm2015/firebaseui-angular.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;AASA;;;;;;;;;;6JAQE;;;;8CAI4C,AAE3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6BAiFD;;;;;;;;;;;;;;;;;sFAiBoF,AAKnF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAoCD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAUmB","file":"firebaseui-angular.js","sourcesContent":["import { __decorate, __metadata, __param } from 'tslib';\nimport { Injectable, EventEmitter, Inject, NgZone, Output, Component, NgModule } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport * as firebaseui$1 from 'firebaseui';\nimport { auth } from 'firebaseui';\nimport 'firebase/auth';\nimport * as firebaseOriginal from 'firebase/app';\nimport { CommonModule } from '@angular/common';\n\nlet FirebaseuiAngularLibraryService = class FirebaseuiAngularLibraryService {\n    constructor(angularFireAuth) {\n        // store the firebaseui instance on the window object to prevent double initialization\n        if (!window.firebaseUiInstance) {\n            window.firebaseUiInstance = new auth.AuthUI(angularFireAuth.auth);\n        }\n        this.firebaseUiInstance = window.firebaseUiInstance;\n    }\n};\nFirebaseuiAngularLibraryService.ctorParameters = () => [\n    { type: AngularFireAuth }\n];\nFirebaseuiAngularLibraryService = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [AngularFireAuth])\n], FirebaseuiAngularLibraryService);\n\nvar FirebaseuiAngularLibraryComponent_1;\nlet FirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = class FirebaseuiAngularLibraryComponent {\n    constructor(angularFireAuth, _firebaseUiConfig, _firebaseUiConfig_Feature, ngZone, firebaseUIService) {\n        this.angularFireAuth = angularFireAuth;\n        this._firebaseUiConfig = _firebaseUiConfig;\n        this._firebaseUiConfig_Feature = _firebaseUiConfig_Feature;\n        this.ngZone = ngZone;\n        this.firebaseUIService = firebaseUIService;\n        this.signInSuccessWithAuthResultCallback = new EventEmitter(); // tslint:disable-line\n        this.signInFailureCallback = new EventEmitter(); // tslint:disable-line\n    }\n    get firebaseUiConfig() {\n        return Object.assign(Object.assign({}, this._firebaseUiConfig), this._firebaseUiConfig_Feature);\n    }\n    ngOnInit() {\n        this.subscription = this.angularFireAuth.authState.subscribe((value) => {\n            if ((value && value.isAnonymous) || !value) {\n                if (this.firebaseUiConfig.signInOptions.length !== 0) {\n                    this.firebaseUIPopup();\n                }\n                else {\n                    throw new Error('There must be at least one AuthProvider.');\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        if (!!this.subscription) {\n            this.subscription.unsubscribe();\n        }\n    }\n    getUIAuthConfig() {\n        if (!this.firebaseUiConfig.callbacks) {\n            this._firebaseUiConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS] = true;\n            this._firebaseUiConfig.callbacks = this.getCallbacks();\n        }\n        return this.firebaseUiConfig;\n    }\n    firebaseUIPopup() {\n        const firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;\n        const uiAuthConfig = this.getUIAuthConfig();\n        // Check if callbacks got computed to reset them again after providing the to firebaseui.\n        // Necessary for allowing updating the firebaseui config during runtime.\n        let resetCallbacks = false;\n        if (uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS]) {\n            resetCallbacks = true;\n            delete uiAuthConfig[FirebaseuiAngularLibraryComponent_1.COMPUTED_CALLBACKS];\n        }\n        // show the firebaseui\n        firebaseUiInstance.start('#firebaseui-auth-container', uiAuthConfig);\n        if (resetCallbacks) {\n            this._firebaseUiConfig.callbacks = null;\n        }\n    }\n    getCallbacks() {\n        const signInSuccessWithAuthResult = (authResult, redirectUrl) => {\n            this.ngZone.run(() => {\n                this.signInSuccessWithAuthResultCallback.emit({\n                    authResult,\n                    redirectUrl\n                });\n            });\n            return this.firebaseUiConfig.signInSuccessUrl;\n        };\n        const signInFailureCallback = (error) => {\n            this.ngZone.run(() => {\n                this.signInFailureCallback.emit({\n                    code: error.code,\n                    credential: error.credential\n                });\n            });\n            return Promise.reject();\n        };\n        return {\n            signInSuccessWithAuthResult: signInSuccessWithAuthResult,\n            signInFailure: signInFailureCallback,\n        };\n    }\n};\nFirebaseuiAngularLibraryComponent.COMPUTED_CALLBACKS = 'COMPUTED_CALLBACKS';\nFirebaseuiAngularLibraryComponent.ctorParameters = () => [\n    { type: AngularFireAuth },\n    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfig',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: ['firebaseUIAuthConfigFeature',] }] },\n    { type: NgZone },\n    { type: FirebaseuiAngularLibraryService }\n];\n__decorate([\n    Output('signInSuccessWithAuthResult'),\n    __metadata(\"design:type\", EventEmitter)\n], FirebaseuiAngularLibraryComponent.prototype, \"signInSuccessWithAuthResultCallback\", void 0);\n__decorate([\n    Output('signInFailure'),\n    __metadata(\"design:type\", EventEmitter)\n], FirebaseuiAngularLibraryComponent.prototype, \"signInFailureCallback\", void 0);\nFirebaseuiAngularLibraryComponent = FirebaseuiAngularLibraryComponent_1 = __decorate([\n    Component({\n        selector: 'firebase-ui',\n        template: '<div id=\"firebaseui-auth-container\"></div>'\n    }),\n    __param(1, Inject('firebaseUIAuthConfig')),\n    __param(2, Inject('firebaseUIAuthConfigFeature')),\n    __metadata(\"design:paramtypes\", [AngularFireAuth, Object, Object, NgZone,\n        FirebaseuiAngularLibraryService])\n], FirebaseuiAngularLibraryComponent);\n\n/*\n * Created by Raphael Jenni\n * Copyright (c) 2017 Raphael Jenni\n */\nconst firebase = firebaseOriginal;\nconst firebaseui = firebaseui$1;\nclass FirebaseUISignInSuccessWithAuthResult {\n}\nclass FirebaseUISignInFailure {\n}\n\nvar FirebaseUIModule_1;\nlet FirebaseUIModule = FirebaseUIModule_1 = class FirebaseUIModule {\n    static forRoot(firebaseUiAuthConfig) {\n        return {\n            ngModule: FirebaseUIModule_1,\n            providers: [\n                { provide: 'firebaseUIAuthConfig', useValue: firebaseUiAuthConfig },\n                { provide: 'firebaseUIAuthConfigFeature', useValue: {} }\n            ]\n        };\n    }\n    static forFeature(firebaseUIAuthConfig) {\n        return {\n            ngModule: FirebaseUIModule_1,\n            providers: [\n                { provide: 'firebaseUIAuthConfigFeature', useValue: firebaseUIAuthConfig }\n            ]\n        };\n    }\n};\nFirebaseUIModule = FirebaseUIModule_1 = __decorate([\n    NgModule({\n        imports: [\n            CommonModule\n        ],\n        declarations: [FirebaseuiAngularLibraryComponent],\n        providers: [FirebaseuiAngularLibraryService],\n        exports: [FirebaseuiAngularLibraryComponent]\n    })\n], FirebaseUIModule);\n\n/*\n * Public API Surface of firebaseui-angular-library\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { FirebaseUIModule, FirebaseUISignInFailure, FirebaseUISignInSuccessWithAuthResult, FirebaseuiAngularLibraryComponent, FirebaseuiAngularLibraryService, firebase, firebaseui };\n"]}