{"version":3,"sources":["/Users/albaortegaflores/Documentos/TFM/code/web/node_modules/angular-star-rating/esm2015/angular-star-rating.js"],"names":[],"mappingsuEAsDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iFAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA0MD,uEAyDC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iFAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAgCD,uKAOC;;;;;;;;;;;;;0BAEyC","file":"angular-star-rating.js","sourcesContent":["import { Component, EventEmitter, forwardRef, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass StarRatingConfig {\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass StarRatingUtils {\n    /**\n     * @param {?} numOfStars\n     * @return {?}\n     */\n    static getStarsArray(numOfStars) {\n        let /** @type {?} */ stars = [];\n        for (let /** @type {?} */ i = 0; i < numOfStars; i++) {\n            stars.push(i + 1);\n        }\n        return stars;\n    }\n    /**\n     * @param {?} rating\n     * @return {?}\n     */\n    static getHalfStarVisible(rating) {\n        return Math.abs(rating % 1) > 0;\n    }\n    /**\n     * @param {?} rating\n     * @param {?} numOfStars\n     * @param {?=} staticColor\n     * @return {?}\n     */\n    static getColor(rating, numOfStars, staticColor) {\n        rating = rating || 0;\n        //if a fix color is set use this one\n        if (staticColor) {\n            return staticColor;\n        }\n        //calculate size of smallest fraction\n        let /** @type {?} */ fractionSize = numOfStars / 3;\n        //apply color by fraction\n        let /** @type {?} */ color = 'default';\n        if (rating > 0) {\n            color = 'negative';\n        }\n        if (rating > fractionSize) {\n            color = 'ok';\n        }\n        if (rating > fractionSize * 2) {\n            color = 'positive';\n        }\n        return color;\n    }\n    /**\n     * @param {?} eventCode\n     * @return {?}\n     */\n    static isDigitKeyEventCode(eventCode) {\n        return eventCode.indexOf('Digit') === 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass StarRating {\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set rating(value) {\n        this.setRating(value);\n    }\n    /**\n     * @return {?}\n     */\n    get showHalfStars() {\n        return this._showHalfStars;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set showHalfStars(value) {\n        this._showHalfStars = !!value;\n        //update halfStarVisible\n        this.setHalfStarVisible();\n    }\n    /**\n     * @return {?}\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set id(value) {\n        this._id = value || '';\n    }\n    /**\n     * @return {?}\n     */\n    get focus() {\n        return this._focus;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set focus(value) {\n        this._focus = !!value;\n    }\n    /**\n     * @return {?}\n     */\n    get labelText() {\n        return this._labelText;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelText(value) {\n        this._labelText = value;\n    }\n    /**\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelPosition(value) {\n        this._labelPosition = value || this.config.labelPosition;\n    }\n    /**\n     * @return {?}\n     */\n    get labelVisible() {\n        return this._labelVisible;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set labelVisible(value) {\n        this._labelVisible = !!value;\n    }\n    /**\n     * @return {?}\n     */\n    get hoverEnabled() {\n        return this._hoverEnabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hoverEnabled(value) {\n        this._hoverEnabled = value !== undefined ? !!value : false;\n    }\n    /**\n     * @return {?}\n     */\n    get staticColor() {\n        return this._staticColor || this.config.staticColor || undefined;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set staticColor(value) {\n        this._staticColor = value;\n        //update color.\n        this.setColor();\n    }\n    /**\n     * @return {?}\n     */\n    get direction() {\n        return this._direction;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set direction(value) {\n        this._direction = value || undefined;\n    }\n    /**\n     * @return {?}\n     */\n    get numOfStars() {\n        return this._numOfStars;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set numOfStars(value) {\n        this._numOfStars = value > 0 ? value : this.config.numOfStars;\n        //update stars array\n        this.stars = StarRatingUtils.getStarsArray(this.numOfStars);\n        //update color\n        this.setColor();\n    }\n    /**\n     * @return {?}\n     */\n    get hoverRating() {\n        return this._hoverRating;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set hoverRating(value) {\n        this._hoverRating = value > 0 ? value : 0;\n    }\n    /**\n     * @return {?}\n     */\n    get speed() {\n        return this._speed;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set speed(value) {\n        this._speed = value || this.config.speed;\n    }\n    /**\n     * @return {?}\n     */\n    get size() {\n        return this._size || this.config.size;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set size(value) {\n        this._size = value;\n    }\n    /**\n     * @return {?}\n     */\n    get starType() {\n        return this._starType || this.config.starType;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set starType(value) {\n        this._starType = value;\n    }\n    /**\n     * @return {?}\n     */\n    get space() {\n        return this._space;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set space(value) {\n        this._space = value;\n    }\n    /**\n     * @return {?}\n     */\n    get readOnly() {\n        return this._readOnly;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set readOnly(value) {\n        this._readOnly = !!value;\n    }\n    /**\n     * @return {?}\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set disabled(value) {\n        this._disabled = !!value;\n    }\n    /**\n     * @return {?}\n     */\n    get step() {\n        return this._step;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set step(value) {\n        this._step = value > 0 ? value : 1;\n    }\n    /**\n     * @return {?}\n     */\n    get rating() {\n        return this._rating;\n    }\n    /**\n     * setRating\n     * I use a setter function instead of a set method to enable overrides for this function.\n     * @param {?} value\n     * @return {?}\n     */\n    setRating(value) {\n        //validate and apply newRating\n        let /** @type {?} */ newRating = 0;\n        if (value >= 0 && value <= this.numOfStars) {\n            newRating = value;\n        }\n        //limit max value to max number of stars\n        if (value > this.numOfStars) {\n            newRating = this.numOfStars;\n        }\n        this._rating = newRating;\n        //update ratingAsInteger. rating parsed to int for the value-[n] modifier\n        this.ratingAsInteger = parseInt(this._rating.toString(), 10);\n        //update halfStarsVisible\n        this.setHalfStarVisible();\n        //update calculated Color\n        this.setColor();\n    }\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        this.config = config;\n        //set default ctrl props\n        this.classEmpty = this.config.classEmpty;\n        this.classHalf = this.config.classHalf;\n        this.classFilled = this.config.classFilled;\n        this.pathEmpty = this.config.svgPathEmpty;\n        this.pathHalf = this.config.svgPathHalf;\n        this.pathFilled = this.config.svgPathFilled;\n        //set default Component Inputs\n        if ('getColor' in this.config &&\n            typeof this.config.getColor === 'function') {\n            this.getColor = this.config.getColor;\n        }\n        if ('getHalfStarVisible' in this.config &&\n            typeof this.config.getHalfStarVisible === 'function') {\n            this.getHalfStarVisible = this.config.getHalfStarVisible;\n        }\n        this.numOfStars = this.config.numOfStars;\n        this.rating = 0;\n        this.step = 1;\n    }\n    /**\n     * @return {?}\n     */\n    svgVisible() {\n        return this.starType === 'svg';\n    }\n    /**\n     * @return {?}\n     */\n    interactionPossible() {\n        return !this.readOnly && !this.disabled;\n    }\n    /**\n     * @param {?=} useHoverValue\n     * @return {?}\n     */\n    setColor(useHoverValue = false) {\n        //check if custom function is given\n        const /** @type {?} */ ratingValue = useHoverValue ? this.hoverRating : this.rating;\n        if (typeof this.getColor === 'function') {\n            this.color = this.getColor(ratingValue, this.numOfStars, this.staticColor);\n        }\n        else {\n            this.color = StarRatingUtils.getColor(ratingValue, this.numOfStars, this.staticColor);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    setHalfStarVisible() {\n        //update halfStarVisible\n        if (this.showHalfStars) {\n            //check if custom function is given\n            if (typeof this.getHalfStarVisible === 'function') {\n                this.halfStarVisible = this.getHalfStarVisible(this.rating);\n            }\n            else {\n                this.halfStarVisible = StarRatingUtils.getHalfStarVisible(this.rating);\n            }\n        }\n        else {\n            this.halfStarVisible = false;\n        }\n    }\n    /**\n     * @return {?}\n     */\n    getComponentClassNames() {\n        const /** @type {?} */ classNames = [];\n        classNames.push(this.rating ? 'value-' + this.ratingAsInteger : 'value-0');\n        classNames.push(this.halfStarVisible ? 'half' : '');\n        classNames.push(this.hoverEnabled ? 'hover' : '');\n        const /** @type {?} */ hoverRating = this.hoverRating\n            ? 'hover-' + this.hoverRating\n            : 'hover-0';\n        classNames.push(this.hoverEnabled ? hoverRating : '');\n        classNames.push(this.space ? 'space-' + this.space : '');\n        classNames.push(this.labelPosition ? 'label-' + this.labelPosition : '');\n        classNames.push(this.color ? 'color-' + this.color : '');\n        classNames.push(this.starType ? 'star-' + this.starType : '');\n        classNames.push(this.speed);\n        classNames.push(this.size);\n        classNames.push(this.readOnly ? 'read-only' : '');\n        classNames.push(this.disabled ? 'disabled' : '');\n        classNames.push(this.direction ? 'direction-' + this.direction : '');\n        return classNames.join(' ');\n    }\n    /**\n     * @return {?}\n     */\n    increment() {\n        //increment to next higher step\n        const /** @type {?} */ absDiff = Math.abs(this.rating % this.step);\n        this.rating = this.rating + (absDiff > 0 ? this.step - absDiff : this.step);\n    }\n    /**\n     * @return {?}\n     */\n    decrement() {\n        //decrement to next lower step\n        const /** @type {?} */ absDiff = Math.abs(this.rating % this.step);\n        this.rating = this.rating - (absDiff > 0 ? absDiff : this.step);\n    }\n    /**\n     * @return {?}\n     */\n    reset() {\n        this.rating = 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Configuration service for the StarRating component.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the star ratings used in the application.\n */\nclass StarRatingConfigService {\n    constructor() {\n        this._classEmpty = 'default-star-empty-icon';\n        this._classHalf = 'default-star-half-icon';\n        this._classFilled = 'default-star-filled-icon';\n        this._numOfStars = 5;\n        this._size = 'medium';\n        this._labelPosition = 'left';\n        this._speed = 'noticeable';\n        this._starType = 'svg';\n        this._assetsPath = 'assets/images/';\n        this._svgPath = this.assetsPath + 'star-rating.icons.svg';\n        this._svgEmptySymbolId = 'star-empty';\n        this._svgHalfSymbolId = 'star-half';\n        this._svgFilledSymbolId = 'star-filled';\n        this._svgPathEmpty = this.svgPath + '#' + this.svgEmptySymbolId;\n        this._svgPathHalf = this.svgPath + '#' + this.svgHalfSymbolId;\n        this._svgPathFilled = this.svgPath + '#' + this.svgFilledSymbolId;\n    }\n    /**\n     * @return {?}\n     */\n    get classEmpty() {\n        return this._classEmpty;\n    }\n    /**\n     * @param {?} classEmpty\n     * @return {?}\n     */\n    set classEmpty(classEmpty) {\n        this._classEmpty = classEmpty;\n    }\n    /**\n     * @return {?}\n     */\n    get classHalf() {\n        return this._classHalf;\n    }\n    /**\n     * @param {?} classHalf\n     * @return {?}\n     */\n    set classHalf(classHalf) {\n        this._classHalf = classHalf;\n    }\n    /**\n     * @return {?}\n     */\n    get classFilled() {\n        return this._classFilled;\n    }\n    /**\n     * @param {?} classFilled\n     * @return {?}\n     */\n    set classFilled(classFilled) {\n        this._classFilled = classFilled;\n    }\n    /**\n     * @return {?}\n     */\n    get numOfStars() {\n        return this._numOfStars;\n    }\n    /**\n     * @param {?} numOfStars\n     * @return {?}\n     */\n    set numOfStars(numOfStars) {\n        this._numOfStars = numOfStars;\n    }\n    /**\n     * @return {?}\n     */\n    get size() {\n        return this._size;\n    }\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    set size(size) {\n        this._size = size;\n    }\n    /**\n     * @return {?}\n     */\n    get staticColor() {\n        return this._staticColor;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    set staticColor(value) {\n        this._staticColor = value;\n    }\n    /**\n     * @return {?}\n     */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    /**\n     * @param {?} labelPosition\n     * @return {?}\n     */\n    set labelPosition(labelPosition) {\n        this._labelPosition = labelPosition;\n    }\n    /**\n     * @return {?}\n     */\n    get speed() {\n        return this._speed;\n    }\n    /**\n     * @param {?} speed\n     * @return {?}\n     */\n    set speed(speed) {\n        this._speed = speed;\n    }\n    /**\n     * @return {?}\n     */\n    get starType() {\n        return this._starType;\n    }\n    /**\n     * @param {?} starType\n     * @return {?}\n     */\n    set starType(starType) {\n        this._starType = starType;\n    }\n    /**\n     * @return {?}\n     */\n    get assetsPath() {\n        return this._assetsPath;\n    }\n    /**\n     * @param {?} assetsPath\n     * @return {?}\n     */\n    set assetsPath(assetsPath) {\n        this._assetsPath = assetsPath;\n    }\n    /**\n     * @return {?}\n     */\n    get svgPath() {\n        return this._svgPath;\n    }\n    /**\n     * @param {?} svgPath\n     * @return {?}\n     */\n    set svgPath(svgPath) {\n        this._svgPath = svgPath;\n    }\n    /**\n     * @return {?}\n     */\n    get svgEmptySymbolId() {\n        return this._svgEmptySymbolId;\n    }\n    /**\n     * @param {?} svgEmptySymbolId\n     * @return {?}\n     */\n    set svgEmptySymbolId(svgEmptySymbolId) {\n        this._svgEmptySymbolId = svgEmptySymbolId;\n    }\n    /**\n     * @return {?}\n     */\n    get svgHalfSymbolId() {\n        return this._svgHalfSymbolId;\n    }\n    /**\n     * @param {?} svgHalfSymbolId\n     * @return {?}\n     */\n    set svgHalfSymbolId(svgHalfSymbolId) {\n        this._svgHalfSymbolId = svgHalfSymbolId;\n    }\n    /**\n     * @return {?}\n     */\n    get svgFilledSymbolId() {\n        return this._svgFilledSymbolId;\n    }\n    /**\n     * @param {?} svgFilledSymbolId\n     * @return {?}\n     */\n    set svgFilledSymbolId(svgFilledSymbolId) {\n        this._svgFilledSymbolId = svgFilledSymbolId;\n    }\n    /**\n     * @return {?}\n     */\n    get svgPathEmpty() {\n        return this._svgPathEmpty;\n    }\n    /**\n     * @param {?} svgPathEmpty\n     * @return {?}\n     */\n    set svgPathEmpty(svgPathEmpty) {\n        this._svgPathEmpty = svgPathEmpty;\n    }\n    /**\n     * @return {?}\n     */\n    get svgPathHalf() {\n        return this._svgPathHalf;\n    }\n    /**\n     * @param {?} svgPathHalf\n     * @return {?}\n     */\n    set svgPathHalf(svgPathHalf) {\n        this._svgPathHalf = svgPathHalf;\n    }\n    /**\n     * @return {?}\n     */\n    get svgPathFilled() {\n        return this._svgPathFilled;\n    }\n    /**\n     * @param {?} svgPathFilled\n     * @return {?}\n     */\n    set svgPathFilled(svgPathFilled) {\n        this._svgPathFilled = svgPathFilled;\n    }\n    /**\n     * @param {?} rating\n     * @param {?} numOfStars\n     * @param {?=} staticColor\n     * @return {?}\n     */\n    getColor(rating, numOfStars, staticColor) {\n        rating = rating || 0;\n        // if a fix color is set use this one\n        if (staticColor) {\n            return staticColor;\n        }\n        // calculate size of smallest fraction\n        const /** @type {?} */ fractionSize = numOfStars / 3;\n        // apply color by fraction\n        let /** @type {?} */ color = 'default';\n        if (rating > 0) {\n            color = 'negative';\n        }\n        if (rating > fractionSize) {\n            color = 'ok';\n        }\n        if (rating > fractionSize * 2) {\n            color = 'positive';\n        }\n        return color;\n    }\n    /**\n     * @param {?} rating\n     * @return {?}\n     */\n    getHalfStarVisible(rating) {\n        return Math.abs(rating % 1) > 0;\n    }\n}\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nclass StarRatingComponent extends StarRating {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        super(config);\n        //Outputs\n        this.starClickChange = new EventEmitter();\n        this.ratingChange = new EventEmitter();\n        this.hoverRatingChange = new EventEmitter();\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnClick($event) {\n        if (this.starClickChange) {\n            this.starClickChange.emit($event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnRatingChange($event) {\n        if (this.ratingChange) {\n            this.ratingChange.emit($event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnHover($event) {\n        if (this.hoverRatingChange) {\n            this.hoverRatingChange.emit($event);\n        }\n    }\n    /**\n     * ACCESSIBILITY *\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        if (!this.interactionPossible()) {\n            return;\n        }\n        const /** @type {?} */ handlers = {\n            //Decrement\n            Minus: () => this.decrement(),\n            ArrowDown: () => this.decrement(),\n            ArrowLeft: () => this.decrement(),\n            //Increment\n            Plus: () => this.increment(),\n            ArrowRight: () => this.increment(),\n            ArrowUp: () => this.increment(),\n            //Reset\n            Backspace: () => this.reset(),\n            Delete: () => this.reset(),\n            Digit0: () => this.reset()\n        };\n        const /** @type {?} */ handleDigits = (eventCode) => {\n            const /** @type {?} */ dStr = 'Digit';\n            const /** @type {?} */ digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n            this.rating = digit;\n        };\n        if (handlers[event['code']] ||\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n                handleDigits(event['code']);\n            }\n            else {\n                handlers[event['code']]();\n            }\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /**\n     * @param {?=} rating\n     * @return {?}\n     */\n    onStarHover(rating) {\n        if (!this.interactionPossible() || !this.hoverEnabled) {\n            return;\n        }\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\n        //update calculated Color\n        this.setColor(true);\n        //fire onHoverRatingChange event\n        const /** @type {?} */ $event = { hoverRating: this.hoverRating };\n        this.saveOnHover($event);\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setRating(value) {\n        const /** @type {?} */ initValue = this.rating;\n        super.setRating(value);\n        //if value changed trigger valueAccessor events and outputs\n        if (initValue !== this.rating) {\n            const /** @type {?} */ $event = { rating: this.rating };\n            this.saveOnRatingChange($event);\n        }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param {?} rating\n     * @return {?}\n     */\n    onStarClicked(rating) {\n        //fire onClick event\n        if (!this.interactionPossible()) {\n            return;\n        }\n        this.rating = rating;\n        const /** @type {?} */ onClickEventObject = {\n            rating: this.rating\n        };\n        this.saveOnClick(onClickEventObject);\n    }\n}\nStarRatingComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'star-rating',\n                inputs: [\n                    'getHalfStarVisible',\n                    'getColor',\n                    'showHalfStars',\n                    'hoverEnabled',\n                    'rating',\n                    'step',\n                    'disabled',\n                    'readOnly',\n                    'space',\n                    'starType',\n                    'size',\n                    'speed',\n                    'numOfStars',\n                    'direction',\n                    'staticColor',\n                    'labelPosition',\n                    'labelText',\n                    'id'\n                ],\n                outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\n                styles: [],\n                template: `<div id=\"{{id}}\"\n  class=\"rating {{getComponentClassNames()}}\"\n  tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\"\n  (mouseleave)=\"onStarHover(0)\">\n    <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n    <div class=\"star-container\">\n        <div class=\"star\"\n          (mouseenter)=\"onStarHover(star)\"\n          *ngFor=\"let star of stars\"\n          (click)=\"onStarClicked(star)\">\n            <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n            <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n            <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n            <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathEmpty\"></use>\n            </svg>\n            <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathHalf\"></use>\n            </svg>\n            <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathFilled\"></use>\n            </svg>\n        </div>\n    </div>\n</div>\n`\n            },] },\n];\n/** @nocollapse */\nStarRatingComponent.ctorParameters = () => [\n    { type: StarRatingConfigService, },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst STAR_RATING_CONTROL_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => StarRatingControlComponent),\n    multi: true\n};\nclass StarRatingControlComponent extends StarRating {\n    /**\n     * @param {?} config\n     */\n    constructor(config) {\n        super(config);\n        //Outputs\n        this.starClickChange = new EventEmitter();\n        this.ratingChange = new EventEmitter();\n        this.hoverRatingChange = new EventEmitter();\n        this.onModelChangeRegistered = false;\n        this.onTouchRegistered = false;\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnClick($event) {\n        if (this.starClickChange) {\n            this.starClickChange.emit($event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnRatingChange($event) {\n        if (this.ratingChange) {\n            this.ratingChange.emit($event);\n        }\n    }\n    /**\n     * @param {?} $event\n     * @return {?}\n     */\n    saveOnHover($event) {\n        if (this.hoverRatingChange) {\n            this.hoverRatingChange.emit($event);\n        }\n    }\n    /**\n     * @return {?}\n     */\n    saveOnTouch() {\n        if (this.onTouchRegistered) {\n            this.onTouch();\n        }\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    saveOnModelChange(value) {\n        if (this.onModelChangeRegistered) {\n            this.onModelChange(value);\n        }\n    }\n    /**\n     * ACCESSIBILITY *\n     * @param {?} event\n     * @return {?}\n     */\n    onKeyDown(event) {\n        if (!this.interactionPossible()) {\n            return;\n        }\n        const /** @type {?} */ handlers = {\n            //Decrement\n            Minus: () => this.decrement(),\n            ArrowDown: () => this.decrement(),\n            ArrowLeft: () => this.decrement(),\n            //Increment\n            Plus: () => this.increment(),\n            ArrowRight: () => this.increment(),\n            ArrowUp: () => this.increment(),\n            //Reset\n            Backspace: () => this.reset(),\n            Delete: () => this.reset(),\n            Digit0: () => this.reset()\n        };\n        const /** @type {?} */ handleDigits = (eventCode) => {\n            const /** @type {?} */ dStr = 'Digit';\n            const /** @type {?} */ digit = parseInt(eventCode.substr(dStr.length, eventCode.length - 1), 10);\n            this.rating = digit;\n        };\n        if (handlers[event['code']] ||\n            StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n            if (StarRatingUtils.isDigitKeyEventCode(event['code'])) {\n                handleDigits(event['code']);\n            }\n            else {\n                handlers[event['code']]();\n            }\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        this.saveOnTouch();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onBlur(event) {\n        this.focus = false;\n        event.preventDefault();\n        event.stopPropagation();\n        this.saveOnTouch();\n    }\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    onFocus(event) {\n        this.focus = true;\n        event.preventDefault();\n        event.stopPropagation();\n        this.saveOnTouch();\n    }\n    /**\n     * @param {?=} rating\n     * @return {?}\n     */\n    onStarHover(rating) {\n        if (!this.interactionPossible() || !this.hoverEnabled) {\n            return;\n        }\n        this.hoverRating = rating ? parseInt(rating.toString(), 10) : 0;\n        //fire onHoverRatingChange event\n        const /** @type {?} */ $event = { hoverRating: this.hoverRating };\n        this.saveOnHover($event);\n    }\n    /**\n     * Form Control - ControlValueAccessor implementation*\n     * @param {?} obj\n     * @return {?}\n     */\n    writeValue(obj) {\n        this.rating = obj;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n        this.onModelChangeRegistered = true;\n    }\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n        this.onTouchRegistered = true;\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    setRating(value) {\n        const /** @type {?} */ initValue = this.rating;\n        super.setRating(value);\n        //if value changed trigger valueAccessor events and outputs\n        if (initValue !== this.rating) {\n            const /** @type {?} */ $event = { rating: this.rating };\n            this.saveOnRatingChange($event);\n            this.saveOnModelChange(this.rating);\n        }\n    }\n    /**\n     * onStarClicked\n     *\n     * Is fired when a star is clicked. And updated the rating value.\n     * This function returns if the disabled or readOnly\n     * property is set. If provided it emits the onClick event\n     * handler with the actual rating value.\n     *\n     * @param {?} rating\n     * @return {?}\n     */\n    onStarClicked(rating) {\n        //fire onClick event\n        if (!this.interactionPossible()) {\n            return;\n        }\n        this.rating = rating;\n        const /** @type {?} */ onClickEventObject = {\n            rating: this.rating\n        };\n        this.saveOnClick(onClickEventObject);\n    }\n}\nStarRatingControlComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'star-rating-control',\n                providers: [STAR_RATING_CONTROL_ACCESSOR],\n                inputs: [\n                    'getHalfStarVisible',\n                    'getColor',\n                    'showHalfStars',\n                    'hoverEnabled',\n                    'rating',\n                    'step',\n                    'disabled',\n                    'readOnly',\n                    'space',\n                    'starType',\n                    'size',\n                    'speed',\n                    'numOfStars',\n                    'direction',\n                    'staticColor',\n                    'labelPosition',\n                    'labelText',\n                    'id'\n                ],\n                outputs: ['starClickChange', 'ratingChange', 'hoverRatingChange'],\n                styles: [],\n                template: `<div id=\"{{id}}\"\n  class=\"rating {{getComponentClassNames()}}\"\n  tabindex=\"0\"\n  (keydown)=\"onKeyDown($event)\"\n  (blur)=\"onBlur($event)\"\n  (focus)=\"onFocus($event)\"\n  (mouseleave)=\"onStarHover(0)\">\n    <div *ngIf=\"labelText\" class=\"label-value\">{{labelText}}</div>\n    <div class=\"star-container\">\n        <div class=\"star\"\n          (mouseenter)=\"onStarHover(star)\"\n          *ngFor=\"let star of stars\"\n          (click)=\"onStarClicked(star)\">\n            <i *ngIf=\"!svgVisible()\" class=\"star-empty {{classEmpty}}\"></i>\n            <i *ngIf=\"!svgVisible()\" class=\"star-half {{classHalf}}\"></i>\n            <i *ngIf=\"!svgVisible()\" class=\"star-filled {{classFilled}}\"></i>\n            <svg *ngIf=\"svgVisible()\" class=\"star-empty\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathEmpty\"></use>\n            </svg>\n            <svg *ngIf=\"svgVisible()\" class=\"star-half\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathHalf\"></use>\n            </svg>\n            <svg *ngIf=\"svgVisible()\" class=\"star-filled\">\n                <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" [attr.xlink:href]=\"pathFilled\"></use>\n            </svg>\n        </div>\n    </div>\n</div>\n`\n            },] },\n];\n/** @nocollapse */\nStarRatingControlComponent.ctorParameters = () => [\n    { type: StarRatingConfigService, },\n];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nconst DECLARATIONS = [\n    StarRatingComponent,\n    StarRatingControlComponent\n];\nconst EXPORTS = [DECLARATIONS];\nclass StarRatingModule {\n    /**\n     * @return {?}\n     */\n    static forRoot() {\n        return {\n            ngModule: StarRatingModule,\n            providers: [\n                StarRatingConfigService\n            ]\n        };\n    }\n    /**\n     * @return {?}\n     */\n    static forChild() {\n        return {\n            ngModule: StarRatingModule,\n            providers: []\n        };\n    }\n}\nStarRatingModule.decorators = [\n    { type: NgModule, args: [{\n                imports: [CommonModule],\n                declarations: [DECLARATIONS],\n                exports: [EXPORTS]\n            },] },\n];\n/** @nocollapse */\nStarRatingModule.ctorParameters = () => [];\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { StarRatingConfig, StarRatingUtils, StarRating, StarRatingConfigService, StarRatingComponent, StarRatingControlComponent, StarRatingModule };\n"]}