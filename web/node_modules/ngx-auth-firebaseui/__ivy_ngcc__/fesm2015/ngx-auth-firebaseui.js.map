{"version":3,"sources":["/Users/albaortegaflores/Documentos/TFM/code/web/node_modules/ngx-auth-firebaseui/fesm2015/ngx-auth-firebaseui.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2JAwCE;;;;wNAIsN,AAK/L;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iVAoRvB;;;;;;;;;iCAS+B,AAI9B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qyCA4ED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oEAsCkE,AAQrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;meA4B7B;;;;;sCAKoC,AAMnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yjFAySD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA8L0B,AAQzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;+aAgDD;;;;;;;;;;;;;;;;;;;oEAmBkE,AAO/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;08GAgEnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8CA2E4C,AAQ3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qxHA2GD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;iDA8E+C,AAQ9C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;q6BA4HD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4BA+B0B,AAMzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;47EAiDD;;;;;;;;;;;;;;;;;;;;;;;;;iEAyB+D,AAQtC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gNAwDzB;;;;;;;4BAO0B,AAIzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mfile":"ngx-auth-firebaseui.js","sourcesContent":["import { __decorate, __awaiter, __param } from 'tslib';\nimport { ɵɵdefineInjectable, ɵɵinject, Injectable, InjectionToken, EventEmitter, Inject, forwardRef, ChangeDetectorRef, Input, Output, ViewChild, Component, ChangeDetectionStrategy, PLATFORM_ID, ViewEncapsulation, NgModule } from '@angular/core';\nimport { Router, ActivatedRoute, RouterModule } from '@angular/router';\nimport { AngularFireAuth, AngularFireAuthModule } from '@angular/fire/auth';\nimport { firebase } from '@firebase/app';\nimport '@firebase/auth';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { map, take, takeUntil } from 'rxjs/operators';\nimport { AngularFirestore, AngularFirestoreModule } from '@angular/fire/firestore';\nimport { MatSnackBar, MatSnackBarConfig, MAT_SNACK_BAR_DEFAULT_OPTIONS, MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialog, MatDialogModule } from '@angular/material/dialog';\nimport { isPlatformBrowser, CommonModule } from '@angular/common';\nimport { FormGroup, FormControl, Validators, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTabGroup, MatTabsModule } from '@angular/material/tabs';\nimport { MatPasswordStrengthComponent, MatPasswordStrengthModule } from '@angular-material-extensions/password-strength';\nimport { animation, style, animate, trigger, transition, useAnimation, state, query, stagger, animateChild } from '@angular/animations';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { FIREBASE_OPTIONS, FIREBASE_APP_NAME } from '@angular/fire';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatIconRegistry, MatIconModule } from '@angular/material/icon';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nvar Accounts;\n(function (Accounts) {\n    Accounts[\"NONE\"] = \"account\";\n    Accounts[\"CHECK\"] = \"account-check\";\n    Accounts[\"EDIT\"] = \"account-edit\";\n    Accounts[\"OFF\"] = \"account-off\";\n    Accounts[\"REMOVE\"] = \"account-remove\";\n})(Accounts || (Accounts = {}));\n\nconst collections = {\n    users: 'users',\n};\nlet FirestoreSyncService = class FirestoreSyncService {\n    constructor(afs) {\n        this.afs = afs;\n        // this.afs.firestore.settings({timestampsInSnapshots: true});\n    }\n    // get timestamp() {\n    //     return firebase.firestore.FieldValue.serverTimestamp();\n    // }\n    getUserDocRefByUID(uid) {\n        return this.afs.doc(`${collections.users}/${uid}`);\n    }\n    deleteUserData(uid) {\n        const userRef = this.getUserDocRefByUID(uid);\n        return userRef.delete();\n    }\n    updateUserData(user) {\n        // Sets user$ data to firestore on login\n        const userRef = this.getUserDocRefByUID(user.uid);\n        const data = {\n            uid: user.uid,\n            email: user.email,\n            displayName: user.displayName,\n            photoURL: user.photoURL,\n            phoneNumber: user.phoneNumber,\n            providerId: user.providerId\n        };\n        return userRef.set(data, { merge: true });\n    }\n};\nFirestoreSyncService.ctorParameters = () => [\n    { type: AngularFirestore }\n];\nFirestoreSyncService.ɵprov = ɵɵdefineInjectable({ factory: function FirestoreSyncService_Factory() { return new FirestoreSyncService(ɵɵinject(AngularFirestore)); }, token: FirestoreSyncService, providedIn: \"root\" });\nFirestoreSyncService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    })\n], FirestoreSyncService);\n\n// This token is the official token containing the final configuration; ie. the merge between default and user provided configurations\nconst NgxAuthFirebaseUIConfigToken = new InjectionToken('NgxAuthFirebaseUIConfigToken');\n// This is an intermediate token containing only user-provided configuration\nconst UserProvidedConfigToken = new InjectionToken('UserProvidedConfigToken');\n\nconst facebookAuthProvider = new firebase.auth.FacebookAuthProvider();\nconst googleAuthProvider = new firebase.auth.GoogleAuthProvider();\nconst appleAuthProvider = new firebase.auth.OAuthProvider('apple.com');\nconst twitterAuthProvider = new firebase.auth.TwitterAuthProvider();\nconst githubAuthProvider = new firebase.auth.GithubAuthProvider();\nconst microsoftAuthProvider = new firebase.auth.OAuthProvider('microsoft.com');\nconst yahooAuthProvider = new firebase.auth.OAuthProvider('yahoo.com');\nvar AuthProvider;\n(function (AuthProvider) {\n    AuthProvider[\"ALL\"] = \"all\";\n    AuthProvider[\"ANONYMOUS\"] = \"anonymous\";\n    AuthProvider[\"EmailAndPassword\"] = \"firebase\";\n    AuthProvider[\"Google\"] = \"google\";\n    AuthProvider[\"Apple\"] = \"Apple\";\n    AuthProvider[\"Facebook\"] = \"facebook\";\n    AuthProvider[\"Twitter\"] = \"twitter\";\n    AuthProvider[\"Github\"] = \"github\";\n    AuthProvider[\"Microsoft\"] = \"microsoft\";\n    AuthProvider[\"Yahoo\"] = \"yahoo\";\n    AuthProvider[\"PhoneNumber\"] = \"phoneNumber\";\n})(AuthProvider || (AuthProvider = {}));\nlet AuthProcessService = class AuthProcessService {\n    constructor(afa, config, snackBar, fireStoreService, matSnackBarConfig) {\n        this.afa = afa;\n        this.config = config;\n        this.snackBar = snackBar;\n        this.fireStoreService = fireStoreService;\n        this.matSnackBarConfig = matSnackBarConfig;\n        this.onSuccessEmitter = new EventEmitter();\n        this.onErrorEmitter = new EventEmitter();\n        // Useful to know about auth state even between reloads.\n        // Replace emailConfirmationSent and emailToConfirm.\n        this._user$ = new BehaviorSubject(null);\n    }\n    get user$() {\n        return this._user$.asObservable();\n    }\n    listenToUserEvents() {\n        this.afa.user.subscribe((user) => {\n            this._user$.next(user);\n            this.user = user;\n        });\n    }\n    /**\n     * Reset the password of the ngx-auth-firebaseui-user via email\n     *\n     * @param email - the email to reset\n     */\n    resetPassword(email) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                console.log('Password reset email sent');\n                return yield this.afa.sendPasswordResetEmail(email);\n            }\n            catch (error) {\n                return this.notifyError(error);\n            }\n        });\n    }\n    /**\n     * General sign in mechanism to authenticate the users with a firebase project\n     * using a traditional way, via username and password or by using an authentication provider\n     * like google, facebook, twitter and github\n     *\n     * @param provider - the provider to authenticate with (google, facebook, twitter, github)\n     * @param credentials optional email and password\n     */\n    signInWith(provider, credentials) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let signInResult;\n                switch (provider) {\n                    case AuthProvider.ANONYMOUS:\n                        signInResult = (yield this.afa.signInAnonymously());\n                        break;\n                    case AuthProvider.EmailAndPassword:\n                        signInResult = (yield this.afa.signInWithEmailAndPassword(credentials.email, credentials.password));\n                        break;\n                    case AuthProvider.Google:\n                        signInResult = (yield this.afa.signInWithPopup(googleAuthProvider));\n                        break;\n                    case AuthProvider.Apple:\n                        signInResult = (yield this.afa.signInWithPopup(appleAuthProvider));\n                        break;\n                    case AuthProvider.Facebook:\n                        signInResult = (yield this.afa.signInWithPopup(facebookAuthProvider));\n                        break;\n                    case AuthProvider.Twitter:\n                        signInResult = (yield this.afa.signInWithPopup(twitterAuthProvider));\n                        break;\n                    case AuthProvider.Github:\n                        signInResult = (yield this.afa.signInWithPopup(githubAuthProvider));\n                        break;\n                    case AuthProvider.Microsoft:\n                        signInResult = (yield this.afa.signInWithPopup(microsoftAuthProvider));\n                        break;\n                    case AuthProvider.Yahoo:\n                        signInResult = (yield this.afa.signInWithPopup(yahooAuthProvider));\n                        break;\n                    case AuthProvider.PhoneNumber:\n                        // coming soon - see feature/sms branch\n                        break;\n                    default:\n                        throw new Error(`${AuthProvider[provider]} is not available as auth provider`);\n                }\n                yield this.handleSuccess(signInResult);\n            }\n            catch (err) {\n                this.handleError(err);\n            }\n        });\n    }\n    /**\n     * Sign up new users via email and password.\n     * After that the ngx-auth-firebaseui-user should verify and confirm an email sent via the firebase\n     *\n     * @param displayName - the displayName if the new ngx-auth-firebaseui-user\n     * @param credentials email and password\n     * @returns -\n     */\n    signUp(displayName, credentials) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const userCredential = yield this.afa.createUserWithEmailAndPassword(credentials.email, credentials.password);\n                const user = userCredential.user;\n                yield this.updateProfile(displayName, user.photoURL);\n                if (this.config.enableFirestoreSync) {\n                    yield this.fireStoreService\n                        .getUserDocRefByUID(user.uid)\n                        .set({\n                        uid: user.uid,\n                        displayName,\n                        email: user.email,\n                        photoURL: user.photoURL\n                    });\n                }\n                if (this.config.enableEmailVerification) {\n                    yield user.sendEmailVerification();\n                }\n                // Legacy fields\n                this.emailConfirmationSent = true;\n                this.emailToConfirm = credentials.email;\n                yield this.handleSuccess(userCredential);\n            }\n            catch (err) {\n                this.handleError(err);\n            }\n        });\n    }\n    sendNewVerificationEmail() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.user) {\n                return Promise.reject(new Error('No signed in user'));\n            }\n            return this.user.sendEmailVerification();\n        });\n    }\n    signOut() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.afa.signOut();\n            }\n            catch (error) {\n                this.notifyError(error);\n            }\n        });\n    }\n    /**\n     * Update the profile (name + photo url) of the authenticated ngx-auth-firebaseui-user in the\n     * firebase authentication feature (not in firestore)\n     *\n     * @param name - the new name of the authenticated ngx-auth-firebaseui-user\n     * @param photoURL - the new photo url of the authenticated ngx-auth-firebaseui-user\n     * @returns -\n     */\n    updateProfile(name, photoURL) {\n        return this.afa.currentUser.then((user) => {\n            if (!photoURL) {\n                return user.updateProfile({ displayName: name });\n            }\n            else {\n                return user.updateProfile({ displayName: name, photoURL });\n            }\n        });\n    }\n    parseUserInfo(user) {\n        return {\n            uid: user.uid,\n            displayName: user.displayName,\n            email: user.email,\n            phoneNumber: user.phoneNumber,\n            photoURL: user.photoURL,\n            providerId: user.providerData.length > 0 ? user.providerData[0].providerId : null\n        };\n    }\n    getUserPhotoUrl() {\n        return this._user$.pipe(map((user) => {\n            if (!user) {\n                return null;\n            }\n            else if (user.photoURL) {\n                return user.photoURL;\n            }\n            else if (user.emailVerified) {\n                return this.getPhotoPath(Accounts.CHECK);\n            }\n            else if (user.isAnonymous) {\n                return this.getPhotoPath(Accounts.OFF);\n            }\n            else {\n                return this.getPhotoPath(Accounts.NONE);\n            }\n        }));\n    }\n    getPhotoPath(image) {\n        return `assets/user/${image}.svg`;\n    }\n    signInWithPhoneNumber() {\n        // todo: 3.1.18\n    }\n    handleSuccess(userCredential) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.onSuccessEmitter.next(userCredential.user);\n            if (this.config.enableFirestoreSync) {\n                try {\n                    yield this.fireStoreService.updateUserData(this.parseUserInfo(userCredential.user));\n                }\n                catch (e) {\n                    console.error(`Error occurred while updating user data with firestore: ${e}`);\n                }\n            }\n            if (this.config.toastMessageOnAuthSuccess) {\n                const fallbackMessage = `Hello ${userCredential.user.displayName ? userCredential.user.displayName : ''}!`;\n                this.showToast(this.messageOnAuthSuccess || fallbackMessage);\n            }\n        });\n    }\n    handleError(error) {\n        this.notifyError(error);\n        console.error(error);\n    }\n    // Refresh user info. Can be useful for instance to get latest status regarding email verification.\n    reloadUserInfo() {\n        return this._user$.pipe(take(1)).subscribe((user) => user && user.reload());\n    }\n    // Search for an error message.\n    // Consumers of this library are given the possibility to provide a\n    // function in case they want to instrument message based on error properties.\n    getMessageOnAuthError(error) {\n        // tslint:disable-next-line:no-bitwise\n        return error.toString() || 'Sorry, something went wrong. Please retry later.';\n    }\n    // Show a toast using current snackbar config. If message is empty, no toast is displayed allowing to opt-out when needed.\n    // Default MatSnackBarConfig has no duration, meaning it stays visible forever.\n    // If that's the case, an action button is added to allow the end-user to dismiss the toast.\n    showToast(message) {\n        if (message) {\n            this.snackBar.open(message, this.matSnackBarConfig.duration ? null : 'OK');\n        }\n    }\n    showErrorToast(error) {\n        if (this.config.toastMessageOnAuthError) {\n            this.showToast(this.getMessageOnAuthError(error));\n        }\n    }\n    notifyError(error) {\n        this.onErrorEmitter.emit(error);\n        this.showErrorToast(error);\n    }\n};\nAuthProcessService.ctorParameters = () => [\n    { type: AngularFireAuth },\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgxAuthFirebaseUIConfigToken),] }] },\n    { type: MatSnackBar },\n    { type: FirestoreSyncService },\n    { type: MatSnackBarConfig, decorators: [{ type: Inject, args: [MAT_SNACK_BAR_DEFAULT_OPTIONS,] }] }\n];\nAuthProcessService.ɵprov = ɵɵdefineInjectable({ factory: function AuthProcessService_Factory() { return new AuthProcessService(ɵɵinject(AngularFireAuth), ɵɵinject(NgxAuthFirebaseUIConfigToken), ɵɵinject(MatSnackBar), ɵɵinject(FirestoreSyncService), ɵɵinject(MAT_SNACK_BAR_DEFAULT_OPTIONS)); }, token: AuthProcessService, providedIn: \"root\" });\nAuthProcessService = __decorate([\n    Injectable({\n        providedIn: 'root'\n    }),\n    __param(1, Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken))),\n    __param(4, Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS))\n], AuthProcessService);\n\nconst defaultTranslations = {\n    verifyEmailTitleText: 'Confirm your e-mail address!',\n    verifyEmailConfirmationText: 'A confirmation e-mail has been sent.' +\n        ' Check your inbox and click on the link \"Confirm my e-mail\" to confirm your e-mail address.',\n    verifyEmailGoBackText: 'Go back',\n    sendNewVerificationEmailText: 'Send new confirmation e-mail',\n    signOutText: 'Sign out',\n    messageOnEmailConfirmationSuccess: 'A new confirmation e-mail has been sent. Please check your inbox.',\n};\nlet EmailConfirmationComponent = class EmailConfirmationComponent {\n    constructor(authProcess, router, changeDetectorRef) {\n        this.authProcess = authProcess;\n        this.router = router;\n        this.changeDetectorRef = changeDetectorRef;\n        this.signOut = new EventEmitter();\n    }\n    ngOnChanges(changes) {\n        if (changes.verifyEmailTemplate && changes.verifyEmailTemplate.currentValue == null) {\n            this.verifyEmailTemplate = this.defaultTemplate;\n            console.log('ngOnChanges - defaultTemplate:', this.verifyEmailTemplate);\n        }\n        this.verifyEmailContext = this.createTemplateContext();\n    }\n    ngOnInit() {\n        if (!this.verifyEmailTemplate) {\n            console.log('ngOnInit - defaultTemplate');\n            this.verifyEmailTemplate = this.defaultTemplate;\n        }\n        this.verifyEmailContext = this.createTemplateContext();\n        console.log('verifyEmailTemplate:', this.verifyEmailTemplate);\n        console.log('verifyEmailContext:', this.verifyEmailContext);\n    }\n    continue() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.authProcess.reloadUserInfo();\n                yield this.router.navigate([this.goBackURL]);\n            }\n            catch (error) {\n                this.authProcess.notifyError(error);\n            }\n        });\n    }\n    sendNewVerificationEmail() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.isLoading = true;\n                this.changeDetectorRef.markForCheck();\n                yield this.authProcess.sendNewVerificationEmail();\n                this.authProcess.showToast(this.verifyEmailContext.messageOnEmailConfirmationSuccess);\n            }\n            catch (error) {\n                this.authProcess.notifyError(error);\n            }\n            finally {\n                this.isLoading = false;\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    createTemplateContext() {\n        return {\n            email: this.email,\n            goBackURL: this.goBackURL,\n            verifyEmailTitleText: this.verifyEmailTitleText || defaultTranslations.verifyEmailTitleText,\n            verifyEmailConfirmationText: this.verifyEmailConfirmationText || defaultTranslations.verifyEmailConfirmationText,\n            verifyEmailGoBackText: this.verifyEmailGoBackText || defaultTranslations.verifyEmailGoBackText,\n            sendNewVerificationEmailText: this.sendNewVerificationEmailText || defaultTranslations.sendNewVerificationEmailText,\n            signOutText: this.signOutText || defaultTranslations.signOutText,\n            messageOnEmailConfirmationSuccess: this.messageOnEmailConfirmationSuccess || defaultTranslations.messageOnEmailConfirmationSuccess\n        };\n    }\n};\nEmailConfirmationComponent.ctorParameters = () => [\n    { type: AuthProcessService },\n    { type: Router },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"email\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"goBackURL\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"verifyEmailTitleText\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"verifyEmailConfirmationText\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"verifyEmailGoBackText\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"sendNewVerificationEmailText\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"signOutText\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"messageOnEmailConfirmationSuccess\", void 0);\n__decorate([\n    Input()\n], EmailConfirmationComponent.prototype, \"template\", void 0);\n__decorate([\n    Output()\n], EmailConfirmationComponent.prototype, \"signOut\", void 0);\n__decorate([\n    ViewChild('defaultVerifyEmail', { static: true })\n], EmailConfirmationComponent.prototype, \"defaultTemplate\", void 0);\nEmailConfirmationComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-email-confirmation',\n        template: \"<ng-container *ngTemplateOutlet=\\\"verifyEmailTemplate; context: verifyEmailContext\\\"></ng-container>\\n<ng-template #defaultVerifyEmail let-email=\\\"email\\\" let-goBackURL=\\\"goBackURL\\\"\\n             let-sendNewVerificationEmailText=\\\"sendNewVerificationEmailText\\\"\\n             let-signOutText=\\\"signOutText\\\"\\n             let-verifyEmailConfirmationText=\\\"verifyEmailConfirmationText\\\" let-verifyEmailGoBackText=\\\"verifyEmailGoBackText\\\"\\n             let-verifyEmailTitleText=\\\"verifyEmailTitleText\\\">\\n  <mat-card class=\\\"verify-email\\\">\\n    <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n      <mat-icon>email</mat-icon>\\n      <p class=\\\"title\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n        <span class=\\\"mat-subheading-2\\\">{{ verifyEmailTitleText }}</span>\\n        <span class=\\\"mat-body-2\\\">{{ email }}</span>\\n      </p>\\n      <p class=\\\"subtitle\\\">{{ verifyEmailConfirmationText }}</p>\\n      <mat-progress-bar *ngIf=\\\"isLoading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n    </mat-card-content>\\n    <mat-card-actions fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n      <button (click)=\\\"continue()\\\" *ngIf=\\\"goBackURL\\\" class=\\\"go-back-button action-button\\\" mat-stroked-button>\\n        {{ verifyEmailGoBackText }}\\n      </button>\\n      <button (click)=\\\"sendNewVerificationEmail()\\\" class=\\\"send-new-mail-button action-button\\\"\\n              mat-stroked-button>{{ sendNewVerificationEmailText }}</button>\\n      <button (click)=\\\"this.signOut.emit()\\\" class=\\\"sign-out-button action-button\\\" color=\\\"warn\\\"\\n              mat-stroked-button>{{ signOutText }}</button>\\n    </mat-card-actions>\\n  </mat-card>\\n</ng-template>\\n\",\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".material-icons{font-size:4rem}.verify-email{width:360px}.verify-email .mat-icon{height:4rem;width:4rem;color:#444}.verify-email .title{margin-top:16px}.verify-email .title .mat-subheading-2{margin-bottom:0}.verify-email .subtitle{margin:16px auto;text-align:justify}.verify-email p{display:block;-webkit-margin-before:1em;-webkit-margin-after:1em;-webkit-margin-start:0;-webkit-margin-end:0}.verify-email mat-card-actions{text-align:center;margin-top:1rem}.verify-email mat-card-actions .action-button{width:100%}.verify-email mat-card-actions .action-button+.action-button{margin-top:1rem}\"]\n    })\n], EmailConfirmationComponent);\n\nlet LegalityDialogComponent = class LegalityDialogComponent {\n    constructor(dialogRef, data) {\n        this.dialogRef = dialogRef;\n        this.data = data;\n        // tslint:disable-next-line:variable-name\n        this._disableConfirmActionButton = false;\n    }\n    get disableConfirmActionButton() {\n        if (this.data.tosUrl && this.data.privacyPolicyUrl) {\n            this._disableConfirmActionButton = !(this.checkTOS && this.checkPrivacyPolicy);\n        }\n        else if (this.data.tosUrl && !this.data.privacyPolicyUrl) {\n            this._disableConfirmActionButton = !this.checkTOS;\n        }\n        else if (!this.data.tosUrl && this.data.privacyPolicyUrl) {\n            this._disableConfirmActionButton = !this.checkPrivacyPolicy;\n        }\n        return this._disableConfirmActionButton;\n    }\n    closeDialog() {\n        const result = {\n            checked: !this.disableConfirmActionButton,\n            authProvider: this.data.authProvider\n        };\n        this.dialogRef.close(result);\n    }\n};\nLegalityDialogComponent.ctorParameters = () => [\n    { type: MatDialogRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }\n];\nLegalityDialogComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-legality-dialog',\n        template: \"<h1 matDialogTitle>Legal requirements</h1>\\n\\n<mat-dialog-content>\\n  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"start\\\">\\n    <mat-checkbox *ngIf=\\\"this.data.tosUrl\\\" [(ngModel)]=\\\"checkTOS\\\">\\n      I agree to the\\n      <span>&nbsp;</span>\\n      <a [href]=\\\"this.data.tosUrl\\\"\\n         target=\\\"_blank\\\">\\n        Terms of Service and Conditions\\n      </a>\\n    </mat-checkbox>\\n\\n    <mat-checkbox *ngIf=\\\"this.data.privacyPolicyUrl\\\"\\n                  [(ngModel)]=\\\"checkPrivacyPolicy\\\">\\n      I have read and agree to the\\n      <span>&nbsp;</span>\\n      <a [href]=\\\"this.data.privacyPolicyUrl\\\"\\n         target=\\\"_blank\\\">\\n        Privacy\\n      </a>\\n    </mat-checkbox>\\n  </div>\\n</mat-dialog-content>\\n\\n<mat-dialog-actions>\\n  <button color=\\\"warn\\\"\\n          id=\\\"decline-action\\\"\\n          mat-raised-button\\n          matDialogClose>Decline\\n  </button>\\n  <button (click)=\\\"closeDialog()\\\"\\n          [disabled]=\\\"disableConfirmActionButton\\\"\\n          color=\\\"primary\\\"\\n          id=\\\"confirm-action\\\"\\n          mat-raised-button>Confirm\\n  </button>\\n</mat-dialog-actions>\\n\\n\",\n        styles: [\"::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}mat-dialog-content div{margin-top:1.5rem}mat-dialog-actions{margin-top:1rem}\"]\n    }),\n    __param(1, Inject(MAT_DIALOG_DATA))\n], LegalityDialogComponent);\n\nconst customAnimation = animation([\n    style({\n        opacity: '{{opacity}}',\n        transform: 'scale({{scale}}) translate3d({{x}}, {{y}}, {{z}})'\n    }),\n    animate('{{duration}} {{delay}} cubic-bezier(0.0, 0.0, 0.2, 1)', style('*'))\n], {\n    params: {\n        duration: '200ms',\n        delay: '0ms',\n        opacity: '0',\n        scale: '1',\n        x: '0',\n        y: '0',\n        z: '0'\n    }\n});\nconst NgxAuthFirebaseuiAnimations = [\n    trigger('animate', [transition('void => *', [useAnimation(customAnimation)])]),\n    trigger('animateStagger', [\n        state('50', style('*')),\n        state('100', style('*')),\n        state('200', style('*')),\n        transition('void => 50', query('@*', [stagger('50ms', [animateChild()])], { optional: true })),\n        transition('void => 100', query('@*', [stagger('100ms', [animateChild()])], { optional: true })),\n        transition('void => 200', query('@*', [stagger('200ms', [animateChild()])], { optional: true }))\n    ]),\n];\n\nconst EMAIL_REGEX = new RegExp(['^(([^<>()[\\\\]\\\\\\.,;:\\\\s@\\\"]+(\\\\.[^<>()\\\\[\\\\]\\\\\\.,;:\\\\s@\\\"]+)*)',\n    '|(\".+\"))@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.',\n    '[0-9]{1,3}\\])|(([a-zA-Z\\\\-0-9]+\\\\.)+',\n    '[a-zA-Z]{2,}))$'].join(''));\n// tslint:disable-next-line:max-line-length\nconst PHONE_NUMBER_REGEX = new RegExp(['^[+]{0,1}[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\.]{0,1}[(]{0,1}[0-9]{1,4}[)]{0,1}[-\\\\s\\\\./0-9]{4,12}$'].join(''));\nlet AuthComponent = class AuthComponent {\n    constructor(\n    // tslint:disable-next-line:ban-types\n    platformId, config, auth, authProcess, dialog, activatedRoute, changeDetectorRef) {\n        this.platformId = platformId;\n        this.config = config;\n        this.auth = auth;\n        this.authProcess = authProcess;\n        this.dialog = dialog;\n        this.activatedRoute = activatedRoute;\n        this.changeDetectorRef = changeDetectorRef;\n        //  google, facebook, twitter, github as array or all as one single string\n        this.providers = AuthProvider.ALL;\n        this.registrationEnabled = true;\n        this.resetPasswordEnabled = true;\n        this.guestEnabled = true;\n        this.selectedTabChange = new EventEmitter();\n        // Password strength api\n        this.enableLengthRule = true;\n        this.enableLowerCaseLetterRule = true;\n        this.enableUpperCaseLetterRule = true;\n        this.enableDigitRule = true;\n        this.enableSpecialCharRule = true;\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onStrengthChanged = new EventEmitter();\n        this.verifyEmailGoBackText = 'Go back';\n        this.signOutText = 'Sign out';\n        // Customize the text\n        // Reset Password Tab\n        this.resetPasswordTabText = 'Reset e-mail address to password';\n        this.resetPasswordInputText = 'Reset e-mail address to password';\n        this.resetPasswordErrorRequiredText = 'E-mail is required to reset the password!';\n        this.resetPasswordErrorPatternText = 'Please enter a valid e-mail address';\n        this.resetPasswordActionButtonText = 'Reset';\n        this.resetPasswordInstructionsText = 'Reset requested. Check your e-mail instructions.';\n        // SignIn Tab\n        this.signInTabText = 'Sign in';\n        this.signInCardTitleText = 'Signing in';\n        this.loginButtonText = 'Log In';\n        this.forgotPasswordButtonText = 'Forgot Password ?';\n        // Common\n        this.nameText = 'Name';\n        this.nameErrorRequiredText = 'Name is required';\n        this.nameErrorMinLengthText = 'The name is too short!';\n        this.nameErrorMaxLengthText = 'The name is too long!';\n        this.emailText = 'E-mail';\n        this.emailErrorRequiredText = 'E-mail is required';\n        this.emailErrorPatternText = 'Please enter a valid e-mail address';\n        this.passwordText = 'Password';\n        this.passwordErrorRequiredText = 'Password is required';\n        this.passwordErrorMinLengthText = 'The password is too short!';\n        this.passwordErrorMaxLengthText = 'The password is too long!';\n        // Register Tab\n        this.registerTabText = 'Register';\n        this.registerCardTitleText = 'Registration';\n        this.registerButtonText = 'Register';\n        this.guestButtonText = 'continue as guest';\n        // email confirmation component\n        this.emailConfirmationTitle = 'Confirm your e-mail address!';\n        // tslint:disable-next-line:max-line-length\n        this.emailConfirmationText = `A confirmation e-mail has been sent to you. Check your inbox and click on the link \"Confirm my e-mail\" to confirm your e-mail address.`;\n        this.authProvider = AuthProvider;\n        this.authenticationError = false;\n        this.passReset = false;\n        this.authProviders = AuthProvider;\n        this.onSuccess = authProcess.onSuccessEmitter;\n        this.onError = authProcess.onErrorEmitter;\n    }\n    get color() {\n        return this.authenticationError ? 'warn' : 'primary';\n    }\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n        }\n        this.min = this.min != null ? Math.max(this.min, this.config.passwordMinLength) : this.config.passwordMinLength;\n        this.max = this.max != null ? Math.min(this.max, this.config.passwordMaxLength) : this.config.passwordMaxLength;\n        this.goBackURL = this.chooseBackUrl();\n        this.updateAuthSnackbarMessages();\n        // auth form's initialization\n        this._initSignInFormGroupBuilder();\n        this._initSignUpFormGroupBuilder();\n        this._initResetPasswordFormGroupBuilder();\n    }\n    ngAfterViewInit() {\n        if (this.passwordStrength) {\n            this.passwordStrength.onStrengthChanged.subscribe((strength) => {\n                this.onStrengthChanged.emit(strength);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes.messageOnAuthSuccess || changes.messageOnAuthError) {\n            this.updateAuthSnackbarMessages();\n        }\n        if (changes.min) {\n            this.min = this.min != null ? Math.max(this.min, this.config.passwordMinLength) : this.config.passwordMinLength;\n        }\n        if (changes.max) {\n            this.max = this.max != null ? Math.min(this.max, this.config.passwordMaxLength) : this.config.passwordMaxLength;\n        }\n        if (changes.goBackURL) {\n            this.goBackURL = this.chooseBackUrl();\n        }\n    }\n    ngOnDestroy() {\n        if (this.onErrorSubscription) {\n            this.onErrorSubscription.unsubscribe();\n        }\n    }\n    onTabChange(event) {\n        this.selectedTabChange.emit(event);\n        this.tabIndex = event.index;\n    }\n    signOut() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.isLoading = true;\n                this.changeDetectorRef.markForCheck();\n                yield this.authProcess.signOut();\n            }\n            finally {\n                this.isLoading = false;\n                this.tabIndex = 0;\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    signIn() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.signInFormGroup.valid) {\n                return;\n            }\n            try {\n                this.isLoading = true;\n                this.changeDetectorRef.markForCheck();\n                yield this.authProcess.signInWith(this.authProviders.EmailAndPassword, {\n                    email: this.signInFormGroup.value.email,\n                    password: this.signInFormGroup.value.password\n                });\n            }\n            finally {\n                this.isLoading = false;\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    updateAuthSnackbarMessages() {\n        this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n        this.authProcess.messageOnAuthError = this.messageOnAuthError;\n    }\n    createForgotPasswordTab() {\n        this.passwordResetWished = true;\n        this.tabIndex = 2;\n        this.changeDetectorRef.markForCheck();\n    }\n    processLegalSignUP(authProvider) {\n        if (this.tosUrl || this.privacyPolicyUrl) {\n            const params = {\n                tosUrl: this.tosUrl,\n                privacyPolicyUrl: this.privacyPolicyUrl,\n                authProvider\n            };\n            this.dialogRef = this.dialog.open(LegalityDialogComponent, { data: params });\n            this.dialogRef.afterClosed().subscribe((result) => {\n                if (result && result.checked) {\n                    this._afterSignUpMiddleware(result.authProvider).then(() => this.signUpFormGroup.reset());\n                }\n                this.dialogRef = null;\n            });\n        }\n        else {\n            this._afterSignUpMiddleware(authProvider).then(() => this.signUpFormGroup.reset());\n        }\n    }\n    signUp() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.isLoading = true;\n                this.changeDetectorRef.markForCheck();\n                return yield this.authProcess.signUp(this.signUpFormGroup.value.name, {\n                    email: this.signUpFormGroup.value.email,\n                    password: this.signUpFormGroup.value.password\n                });\n            }\n            finally {\n                this.isLoading = false;\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    signUpAnonymously() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.isLoading = true;\n                this.changeDetectorRef.markForCheck();\n                yield this.authProcess.signInWith(this.authProvider.ANONYMOUS);\n            }\n            finally {\n                this.isLoading = false;\n                this.changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    resetPassword() {\n        this.authProcess.resetPassword(this.resetPasswordEmailFormControl.value)\n            .then(() => {\n            this.passReset = true;\n            // this.tabIndex = 2;\n            this.changeDetectorRef.markForCheck();\n        });\n    }\n    chooseBackUrl() {\n        return this.activatedRoute.snapshot.queryParams.redirectUrl || this.goBackURL || '/';\n    }\n    _initSignInFormGroupBuilder() {\n        this.signInFormGroup = new FormGroup({});\n        this.signInFormGroup.registerControl('email', this.signInEmailFormControl = new FormControl('', [\n            Validators.required,\n            Validators.pattern(EMAIL_REGEX)\n        ]));\n        this.signInFormGroup.registerControl('password', this.sigInPasswordFormControl = new FormControl('', [\n            Validators.required,\n            Validators.minLength(this.min),\n            Validators.maxLength(this.max)\n        ]));\n    }\n    _initSignUpFormGroupBuilder() {\n        this.signUpFormGroup = new FormGroup({\n            name: this.sigUpNameFormControl = new FormControl('', [\n                Validators.required,\n                Validators.minLength(this.config.nameMinLength),\n                Validators.maxLength(this.config.nameMaxLength)\n            ]),\n            email: this.sigUpEmailFormControl = new FormControl('', [\n                Validators.required,\n                Validators.pattern(EMAIL_REGEX)\n            ]),\n            password: this.sigUpPasswordFormControl = new FormControl('', [\n                Validators.required,\n                Validators.minLength(this.min),\n                Validators.maxLength(this.max),\n            ])\n        });\n    }\n    _initResetPasswordFormGroupBuilder() {\n        this.resetPasswordFormGroup = new FormGroup({\n            email: this.resetPasswordEmailFormControl = new FormControl('', [\n                Validators.required,\n                Validators.pattern(EMAIL_REGEX)\n            ])\n        });\n    }\n    _afterSignUpMiddleware(authProvider) {\n        if (authProvider === this.authProvider.ANONYMOUS) {\n            return this.signUpAnonymously();\n        }\n        return this.signUp();\n    }\n};\nAuthComponent.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgxAuthFirebaseUIConfigToken),] }] },\n    { type: AngularFireAuth },\n    { type: AuthProcessService },\n    { type: MatDialog },\n    { type: ActivatedRoute },\n    { type: ChangeDetectorRef }\n];\n__decorate([\n    ViewChild(MatTabGroup, { static: false })\n], AuthComponent.prototype, \"matTabGroup\", void 0);\n__decorate([\n    ViewChild(MatPasswordStrengthComponent, { static: false })\n], AuthComponent.prototype, \"passwordStrength\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"providers\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"providersTheme\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"appearance\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"tabIndex\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"registrationEnabled\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordEnabled\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"guestEnabled\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"tosUrl\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"privacyPolicyUrl\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"goBackURL\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"messageOnAuthSuccess\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"messageOnAuthError\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"messageOnEmailConfirmationSuccess\", void 0);\n__decorate([\n    Output()\n], AuthComponent.prototype, \"onSuccess\", void 0);\n__decorate([\n    Output()\n], AuthComponent.prototype, \"onError\", void 0);\n__decorate([\n    Output()\n], AuthComponent.prototype, \"selectedTabChange\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"enableLengthRule\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"enableLowerCaseLetterRule\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"enableUpperCaseLetterRule\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"enableDigitRule\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"enableSpecialCharRule\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"min\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"max\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"customValidator\", void 0);\n__decorate([\n    Output()\n], AuthComponent.prototype, \"onStrengthChanged\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"verifyEmailTemplate\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"verifyEmailTitleText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"verifyEmailConfirmationText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"verifyEmailGoBackText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"sendNewVerificationEmailText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"signOutText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordTabText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordInputText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordErrorPatternText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordActionButtonText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"resetPasswordInstructionsText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"signInTabText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"signInCardTitleText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"loginButtonText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"forgotPasswordButtonText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"nameText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"nameErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"nameErrorMinLengthText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"nameErrorMaxLengthText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"emailText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"emailErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"emailErrorPatternText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"passwordText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"passwordErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"passwordErrorMinLengthText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"passwordErrorMaxLengthText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"registerTabText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"registerCardTitleText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"registerButtonText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"guestButtonText\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"emailConfirmationTitle\", void 0);\n__decorate([\n    Input()\n], AuthComponent.prototype, \"emailConfirmationText\", void 0);\nAuthComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui',\n        template: \"<ng-container *ngIf=\\\"authProcess.user$ | async as user; else showForm\\\">\\n\\n  <!-- This component will be shown when:\\n    - we just sent a verification mail (notably after sign up)\\n    - we arrived from the guard after trying to access a protected route even though we are connected\\n  -->\\n  <div\\n    *ngIf=\\\"(config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified) || (authProcess.emailConfirmationSent && !user.emailVerified); else signedInUser\\\"\\n    fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n    <ngx-auth-firebaseui-email-confirmation\\n      (signOut)=\\\"signOut()\\\"\\n      [email]=\\\"user.email\\\"\\n      [goBackURL]=\\\"goBackURL\\\"\\n      [messageOnEmailConfirmationSuccess]=\\\"messageOnEmailConfirmationSuccess\\\"\\n      [sendNewVerificationEmailText]=\\\"sendNewVerificationEmailText\\\"\\n      [signOutText]=\\\"signOutText\\\"\\n      [template]=\\\"verifyEmailTemplate\\\"\\n      [verifyEmailConfirmationText]=\\\"verifyEmailConfirmationText\\\"\\n      [verifyEmailGoBackText]=\\\"verifyEmailGoBackText\\\"\\n      [verifyEmailTitleText]=\\\"verifyEmailTitleText\\\">\\n    </ngx-auth-firebaseui-email-confirmation>\\n  </div>\\n\\n  <ng-template #signedInUser>\\n    <div class=\\\"signed-in-container\\\" fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n      <img *ngIf=\\\"user?.photoURL; else noPhoto\\\" [src]=\\\"user?.photoURL\\\" class=\\\"account-circle\\\">\\n      <ng-template #noPhoto>\\n        <mat-icon class=\\\"account-circle\\\">account_circle</mat-icon>\\n      </ng-template>\\n      <div class=\\\"user-display-name mat-title\\\">{{ user?.displayName }}</div>\\n      <div class=\\\"user-email mat-body-2\\\">{{ user?.email }}</div>\\n      <div class=\\\"actions\\\">\\n        <mat-progress-bar *ngIf=\\\"isLoading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n        <a [routerLink]=\\\"goBackURL\\\" class=\\\"go-back-button action-button\\\" color=\\\"primary\\\"\\n           mat-stroked-button>{{ verifyEmailGoBackText }}</a>\\n        <button (click)=\\\"signOut()\\\" class=\\\"sign-out-button action-button\\\" color=\\\"warn\\\"\\n                mat-stroked-button>{{ signOutText }}</button>\\n      </div>\\n    </div>\\n  </ng-template>\\n\\n</ng-container>\\n\\n<ng-template #showForm>\\n  <mat-tab-group (selectedTabChange)=\\\"onTabChange($event)\\\" [color]=\\\"color\\\" [selectedIndex]=\\\"tabIndex\\\">\\n    <!--Sign in tab-->\\n    <mat-tab [label]=\\\"signInTabText\\\">\\n      <mat-card>\\n        <mat-card-title>{{signInCardTitleText}}</mat-card-title>\\n        <mat-card-content>\\n          <form (ngSubmit)=\\\"signIn()\\\"\\n                [@animateStagger]=\\\"{ value: '50' }\\\"\\n                [formGroup]=\\\"signInFormGroup\\\">\\n            <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n              <mat-form-field [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n                              [appearance]=\\\"appearance\\\">\\n                <mat-label>{{emailText}}</mat-label>\\n                <input formControlName=\\\"email\\\"\\n                       matInput\\n                       required>\\n                <mat-icon [color]=\\\"color\\\" matSuffix>email</mat-icon>\\n                <mat-error *ngIf=\\\"signInEmailFormControl.hasError('required')\\\">\\n                  {{emailErrorRequiredText}}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"signInEmailFormControl.hasError('pattern')\\\">\\n                  {{emailErrorPatternText}}\\n                </mat-error>\\n              </mat-form-field>\\n\\n              <mat-form-field [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n                              [appearance]=\\\"appearance\\\">\\n                <mat-label>{{passwordText}}</mat-label>\\n                <input [maxlength]=\\\"max\\\" [minlength]=\\\"min\\\" [type]=\\\"togglePass.type\\\" formControlName=\\\"password\\\" matInput\\n                       required/>\\n                <mat-pass-toggle-visibility #togglePass matSuffix></mat-pass-toggle-visibility>\\n                <mat-icon [color]=\\\"color\\\" matSuffix>lock</mat-icon>\\n                <mat-hint align=\\\"end\\\" aria-live=\\\"polite\\\"> {{ signInFormGroup.value.password.length }}\\n                  / {{ max }} </mat-hint>\\n                <mat-error *ngIf=\\\"sigInPasswordFormControl.hasError('required')\\\">\\n                  {{passwordErrorRequiredText}}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"sigInPasswordFormControl.hasError('minlength')\\\">\\n                  {{ passwordErrorMinLengthText }}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"sigInPasswordFormControl.hasError('maxlength')\\\">\\n                  {{ passwordErrorMaxLengthText }}\\n                </mat-error>\\n              </mat-form-field>\\n\\n              <button [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n                      [color]=\\\"color\\\"\\n                      [disabled]=\\\"signInFormGroup.invalid\\\"\\n                      class=\\\"space-top\\\"\\n                      mat-raised-button\\n                      style=\\\"margin-top: 20px\\\"\\n                      type=\\\"submit\\\">\\n                {{loginButtonText}}\\n              </button>\\n\\n            </div>\\n          </form>\\n\\n          <div fxLayoutAlign=\\\"center\\\">\\n            <button (click)=\\\"createForgotPasswordTab()\\\"\\n                    *ngIf=\\\"resetPasswordEnabled\\\"\\n                    [@animate]=\\\"{ value: '*', params: { x: '-50px' } }\\\"\\n                    [color]=\\\"color\\\"\\n                    class=\\\"space-top\\\"\\n                    mat-button>\\n              {{forgotPasswordButtonText}}\\n            </button>\\n          </div>\\n\\n        </mat-card-content>\\n        <mat-card-footer *ngIf=\\\"isLoading\\\">\\n          <mat-progress-bar [@animate]=\\\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\\\"\\n                            mode=\\\"indeterminate\\\"></mat-progress-bar>\\n        </mat-card-footer>\\n      </mat-card>\\n    </mat-tab>\\n\\n    <!--tab register-->\\n    <mat-tab *ngIf=\\\"registrationEnabled\\\" [label]=\\\"registerTabText\\\">\\n      <mat-card>\\n        <mat-card-title>{{registerCardTitleText}}</mat-card-title>\\n        <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n          <form (ngSubmit)=\\\"signUpFormGroup.valid &&\\n            processLegalSignUP(authProvider.EmailAndPassword)\\\"\\n                [@animateStagger]=\\\"{ value: '50' }\\\" [formGroup]=\\\"signUpFormGroup\\\">\\n            <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center\\\">\\n              <!--name-->\\n              <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n                              [appearance]=\\\"appearance\\\">\\n                <!--labels will work only with @angular/material@6.2.0 -->\\n                <mat-label>{{nameText}}</mat-label>\\n                <input\\n                  [formControl]=\\\"sigUpNameFormControl\\\"\\n                  [maxlength]=\\\"config.nameMaxLength\\\"\\n                  [minlength]=\\\"config.nameMinLength\\\"\\n                  matInput\\n                  required\\n                />\\n                <mat-icon [color]=\\\"color\\\" matSuffix>person</mat-icon>\\n                <mat-hint align=\\\"end\\\" aria-live=\\\"polite\\\"> {{ signUpFormGroup.value.name?.length }}\\n                  / {{ config.nameMaxLength }} </mat-hint>\\n                <mat-error *ngIf=\\\"sigUpNameFormControl.hasError('required')\\\">\\n                  {{nameErrorRequiredText}}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"sigUpNameFormControl.hasError('minlength')\\\">\\n                  {{nameErrorMinLengthText}}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"sigUpNameFormControl.hasError('maxlength')\\\">\\n                  {{nameErrorMaxLengthText}}\\n                </mat-error>\\n              </mat-form-field>\\n\\n              <!--email-->\\n              <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n                              [appearance]=\\\"appearance\\\">\\n                <mat-label>{{emailText}}</mat-label>\\n                <input [formControl]=\\\"sigUpEmailFormControl\\\"\\n                       matInput\\n                       required\\n                       type=\\\"email\\\">\\n                <mat-icon [color]=\\\"color\\\" matSuffix>email</mat-icon>\\n                <mat-error *ngIf=\\\"sigUpEmailFormControl.hasError('required')\\\">\\n                  {{emailErrorRequiredText}}\\n                </mat-error>\\n                <mat-error *ngIf=\\\"sigUpEmailFormControl.hasError('pattern')\\\">\\n                  {{emailErrorPatternText}}\\n                </mat-error>\\n              </mat-form-field>\\n\\n              <!--password-->\\n              <div fxLayout=\\\"column\\\">\\n                <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n                                [appearance]=\\\"appearance\\\">\\n                  <mat-label>{{passwordText}}</mat-label>\\n                  <input\\n                    [formControl]=\\\"sigUpPasswordFormControl\\\"\\n                    [maxlength]=\\\"max\\\"\\n                    [minlength]=\\\"min\\\"\\n                    [type]=\\\"toggle.type\\\"\\n                    matInput\\n                    name=\\\"password\\\"\\n                    required\\n                  />\\n                  <mat-pass-toggle-visibility #toggle matSuffix></mat-pass-toggle-visibility>\\n\\n                  <mat-icon [color]=\\\"color\\\" matSuffix>lock</mat-icon>\\n\\n                  <mat-hint align=\\\"end\\\" aria-live=\\\"polite\\\">\\n                    {{signUpFormGroup.value.password?.length}} / {{ max }}\\n                  </mat-hint>\\n\\n                  <mat-error *ngIf=\\\"sigUpPasswordFormControl.hasError('required')\\\" class=\\\"cut-text\\\">\\n                    {{passwordErrorRequiredText}}\\n                  </mat-error>\\n\\n                  <mat-error *ngIf=\\\"sigUpPasswordFormControl.hasError('minlength')\\\" class=\\\"cut-text\\\">\\n                    {{ passwordErrorMinLengthText }}\\n                  </mat-error>\\n                  <mat-error *ngIf=\\\"sigUpPasswordFormControl.hasError('maxlength')\\\" class=\\\"cut-text\\\">\\n                    {{ passwordErrorMaxLengthText }}\\n                  </mat-error>\\n\\n                </mat-form-field>\\n\\n                <mat-password-strength #passwordStrength\\n                                       [customValidator]=\\\"customValidator\\\"\\n                                       [enableDigitRule]=\\\"enableDigitRule\\\"\\n                                       [enableLengthRule]=\\\"enableLengthRule\\\"\\n                                       [enableLowerCaseLetterRule]=\\\"enableLowerCaseLetterRule\\\"\\n                                       [enableSpecialCharRule]=\\\"enableSpecialCharRule\\\"\\n                                       [enableUpperCaseLetterRule]=\\\"enableUpperCaseLetterRule\\\"\\n                                       [externalError]=\\\"sigUpPasswordFormControl.dirty\\\"\\n                                       [max]=\\\"max\\\"\\n                                       [min]=\\\"min\\\"\\n                                       [password]=\\\"signUpFormGroup.value.password\\\">\\n                </mat-password-strength>\\n\\n              </div>\\n\\n              <button [@animate]=\\\"{ value: '*', params: { x: '100px' } }\\\"\\n                      [color]=\\\"color\\\"\\n                      [disabled]=\\\"signUpFormGroup.invalid\\\"\\n                      mat-raised-button\\n                      style=\\\"margin-top: 20px\\\"\\n                      type=\\\"submit\\\">\\n                {{registerButtonText}}\\n              </button>\\n\\n            </div>\\n          </form>\\n\\n          <button (click)=\\\"processLegalSignUP(authProvider.ANONYMOUS)\\\"\\n                  *ngIf=\\\"guestEnabled\\\"\\n                  [@animate]=\\\"{ value: '*', params: { x: '-100px' } }\\\"\\n                  [color]=\\\"color\\\"\\n                  mat-button\\n                  style=\\\"margin-top: 20px\\\">\\n            <mat-icon>fingerprint</mat-icon>\\n            {{guestButtonText}}\\n          </button>\\n\\n        </mat-card-content>\\n\\n        <mat-card-footer *ngIf=\\\"isLoading\\\">\\n          <mat-progress-bar [@animate]=\\\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\\\"\\n                            mode=\\\"indeterminate\\\"></mat-progress-bar>\\n        </mat-card-footer>\\n\\n      </mat-card>\\n    </mat-tab>\\n\\n    <!--Reset password tab-->\\n    <mat-tab *ngIf=\\\"passwordResetWished\\\" class=\\\"reset-password-tab\\\">\\n      <ng-template mat-tab-label>\\n        <button (click)=\\\"passwordResetWished = false\\\" class=\\\"reset-password-tab__close-button\\\" mat-icon-button>\\n          {{ resetPasswordTabText }}\\n          <mat-icon>close</mat-icon>\\n        </button>\\n      </ng-template>\\n      <form (ngSubmit)=\\\"resetPasswordFormGroup.valid && resetPassword()\\\"\\n            [@animateStagger]=\\\"{ value: '50' }\\\"\\n            [formGroup]=\\\"resetPasswordFormGroup\\\">\\n        <mat-card class=\\\"reset-password-card\\\">\\n          <mat-card-content>\\n            <mat-form-field [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\" [appearance]=\\\"appearance\\\"\\n                            class=\\\"full-width\\\">\\n              <mat-label> {{ resetPasswordInputText }} </mat-label>\\n              <input [title]=\\\"resetPasswordInputText\\\"\\n                     formControlName=\\\"email\\\"\\n                     matInput\\n                     required>\\n              <mat-icon [color]=\\\"color\\\" matSuffix>email</mat-icon>\\n              <mat-error *ngIf=\\\"resetPasswordEmailFormControl.hasError('required')\\\">\\n                {{resetPasswordErrorRequiredText}}\\n              </mat-error>\\n              <mat-error *ngIf=\\\"resetPasswordEmailFormControl.hasError('pattern')\\\">\\n                {{resetPasswordErrorPatternText}}\\n              </mat-error>\\n            </mat-form-field>\\n            <p *ngIf=\\\"passReset\\\">{{resetPasswordInstructionsText}}</p>\\n          </mat-card-content>\\n          <mat-card-actions fxLayoutAlign=\\\"center\\\">\\n            <mat-progress-bar *ngIf=\\\"isLoading\\\" mode=\\\"indeterminate\\\"></mat-progress-bar>\\n            <button [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n                    [color]=\\\"color\\\"\\n                    mat-raised-button\\n                    type=\\\"submit\\\">\\n              {{resetPasswordActionButtonText}}\\n            </button>\\n          </mat-card-actions>\\n        </mat-card>\\n      </form>\\n    </mat-tab>\\n\\n  </mat-tab-group>\\n  <mat-divider></mat-divider>\\n  <ngx-auth-firebaseui-providers *ngIf=\\\"tabIndex !== 2\\\"\\n                                 [providers]=\\\"providers\\\"\\n                                 [theme]=\\\"providersTheme\\\"\\n                                 [tosUrl]=\\\"tosUrl\\\"\\n                                 [privacyPolicyUrl]=\\\"privacyPolicyUrl\\\">\\n  </ngx-auth-firebaseui-providers>\\n</ng-template>\\n\",\n        animations: NgxAuthFirebaseuiAnimations,\n        changeDetection: ChangeDetectionStrategy.OnPush,\n        styles: [\".mat-card{margin:2rem}.space-top{margin-top:.5rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.signed-in-container .account-circle{font-size:12rem;width:12rem;height:12rem}.signed-in-container img.account-circle{-o-object-fit:cover;object-fit:cover;border-radius:50%}.signed-in-container .sign-out-button{margin-top:2rem}.signed-in-container .user-display-name{margin-top:1rem}.signed-in-container .user-email{margin-top:-1rem}.signed-in-container .actions{margin-top:2rem}.signed-in-container .actions .action-button,.signed-in-container .actions mat-progress-bar{width:100%}.signed-in-container .actions .action-button{margin-top:1rem}.reset-password-tab mat-progress-bar{margin-bottom:1rem}.reset-password-tab__close-button{width:100%;display:flex;justify-content:space-between;align-items:center}.reset-password-tab__close-button mat-icon{font-size:18px;position:relative;top:-1px}\"]\n    }),\n    __param(0, Inject(PLATFORM_ID)),\n    __param(1, Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken)))\n], AuthComponent);\n\nlet NgxAuthFirebaseuiAvatarComponent = class NgxAuthFirebaseuiAvatarComponent {\n    constructor(afa, dialog) {\n        this.afa = afa;\n        this.dialog = dialog;\n        this.canLogout = true;\n        this.canDeleteAccount = true;\n        this.canEditAccount = true;\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSignOut = new EventEmitter();\n    }\n    ngOnInit() {\n        this.user$ = this.afa.user;\n        this.user$.subscribe((user) => {\n            this.user = user;\n            this.displayNameInitials = user ? this.getDisplayNameInitials(user.displayName) : null;\n        });\n    }\n    getDisplayNameInitials(displayName) {\n        if (!displayName) {\n            return null;\n        }\n        const initialsRegExp = displayName.match(/\\b\\w/g) || [];\n        const initials = ((initialsRegExp.shift() || '') + (initialsRegExp.pop() || '')).toUpperCase();\n        return initials;\n    }\n    openProfile() {\n        const dialogRef = this.dialog.open(UserComponent);\n        const instance = dialogRef.componentInstance;\n        instance.canDeleteAccount = this.canDeleteAccount;\n        instance.canEditAccount = this.canEditAccount;\n    }\n    signOut() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.afa.signOut();\n                // Sign-out successful.\n                this.onSignOut.emit();\n            }\n            catch (e) {\n                // An error happened.\n                console.error('An error happened while signing out!', e);\n            }\n        });\n    }\n};\nNgxAuthFirebaseuiAvatarComponent.ctorParameters = () => [\n    { type: AngularFireAuth },\n    { type: MatDialog }\n];\n__decorate([\n    Input()\n], NgxAuthFirebaseuiAvatarComponent.prototype, \"canLogout\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiAvatarComponent.prototype, \"links\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiAvatarComponent.prototype, \"canDeleteAccount\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiAvatarComponent.prototype, \"canEditAccount\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiAvatarComponent.prototype, \"onSignOut\", void 0);\nNgxAuthFirebaseuiAvatarComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-avatar',\n        template: \"<button *ngIf=\\\"user\\\"\\n        [matMenuTriggerFor]=\\\"posXMenu\\\"\\n        [matTooltip]=\\\"user?.displayName\\\"\\n        [style.background-image]=\\\"'url(' + user?.photoURL + ')'\\\"\\n        aria-label=\\\"Open x-positioned menu\\\"\\n        mat-mini-fab\\n        style=\\\"background-size: cover\\\">\\n  <span *ngIf=\\\"!user?.photoURL\\\">{{displayNameInitials || ''}}</span>\\n</button>\\n\\n<mat-menu #posXMenu=\\\"matMenu\\\" class=\\\"before\\\" xPosition=\\\"before\\\">\\n  <div fxLayout=\\\"row\\\" fxLayout.xs=\\\"column\\\" style=\\\"padding-left: 10px; padding-right: 10px\\\">\\n    <button [style.background-image]=\\\"'url(' + user?.photoURL + ')'\\\"\\n            mat-fab\\n            style=\\\"background-size: cover\\\">\\n      <span *ngIf=\\\"!user?.photoURL\\\">{{displayNameInitials || ''}}</span>\\n    </button>\\n    <div fxLayout=\\\"column\\\" style=\\\"padding-left: 10px; padding-right: 10px\\\">\\n      <strong mat-card-title>{{user?.displayName}}</strong>\\n      <em mat-card-subtitle style=\\\"font-style: italic\\\">{{user?.email}}</em>\\n    </div>\\n  </div>\\n\\n  <div fxFlex=\\\"100\\\" fxLayout=\\\"column\\\">\\n    <div *ngFor=\\\"let menuItem of links\\\" class=\\\"links-menu\\\">\\n      <button (click)=\\\"menuItem?.callback()\\\" mat-menu-item>\\n        <mat-icon>{{menuItem?.icon}}</mat-icon>\\n        {{menuItem?.text}}</button>\\n    </div>\\n    <button (click)=\\\"openProfile()\\\" color=\\\"primary\\\" fxLayoutAlign=\\\"center\\\" mat-raised-button>Profile\\n    </button>\\n    <button (click)=\\\"signOut()\\\" *ngIf=\\\"canLogout\\\" color=\\\"warn\\\" fxLayoutAlign=\\\"center\\\" mat-raised-button>Sign Out\\n    </button>\\n  </div>\\n</mat-menu>\\n\",\n        styles: [\".mat-raised-button{margin:.2rem 1rem}.links-menu{text-align:center}\"]\n    })\n], NgxAuthFirebaseuiAvatarComponent);\n\nlet NgxAuthFirebaseuiLoginComponent = class NgxAuthFirebaseuiLoginComponent {\n    constructor(\n    // tslint:disable-next-line:ban-types\n    platformId, authProcess, formBuilder) {\n        this.platformId = platformId;\n        this.authProcess = authProcess;\n        this.formBuilder = formBuilder;\n        this.providers = AuthProvider.ALL; //  google, facebook, twitter, github as array or all as one single string\n        this.registrationEnabled = true;\n        this.resetPasswordEnabled = true;\n        // i18n\n        this.titleText = 'LOGIN TO YOUR ACCOUNT';\n        this.rememberMeText = 'Remember Me';\n        this.loginButtonText = 'LOGIN';\n        this.orLabelText = 'OR';\n        this.forgotPasswordText = 'Forgot Password?';\n        this.dontHaveAnAccountText = 'Don\\'t have an account?';\n        this.createAccountButtonText = 'Create an account';\n        // i18n email\n        this.emailText = 'Email';\n        this.emailErrorRequiredText = 'Email is required';\n        this.emailErrorPatternText = 'Please enter a valid email address';\n        // i18n password\n        this.passwordText = 'Password';\n        this.passwordErrorRequiredText = 'Password is required';\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onCreateAccountRequested = new EventEmitter();\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onResetPasswordRequested = new EventEmitter();\n        this.authProviders = AuthProvider;\n        this.authenticationError = false;\n        this.onSuccess = authProcess.onSuccessEmitter;\n        this.onError = authProcess.onErrorEmitter;\n    }\n    get color() {\n        return this.authenticationError ? 'warn' : 'primary';\n    }\n    get colorAccent() {\n        return this.authenticationError ? 'warn' : 'accent';\n    }\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n        }\n        this.updateAuthSnackbarMessages();\n        this.loginForm = this.formBuilder.group({\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required]\n        });\n    }\n    updateAuthSnackbarMessages() {\n        this.authProcess.messageOnAuthSuccess = this.messageOnAuthSuccess;\n        this.authProcess.messageOnAuthError = this.messageOnAuthError;\n    }\n    login() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.authProcess.signInWith(this.authProviders.EmailAndPassword, {\n                email: this.loginForm.controls.email.value,\n                password: this.loginForm.controls.password.value\n            });\n        });\n    }\n};\nNgxAuthFirebaseuiLoginComponent.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: AuthProcessService },\n    { type: FormBuilder }\n];\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"logoUrl\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"providers\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"appearance\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"registrationEnabled\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"resetPasswordEnabled\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"messageOnAuthSuccess\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"messageOnAuthError\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"titleText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"rememberMeText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"loginButtonText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"orLabelText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"forgotPasswordText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"dontHaveAnAccountText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"createAccountButtonText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"emailText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"emailErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"emailErrorPatternText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"passwordText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"passwordErrorRequiredText\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"onSuccess\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"onError\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"onCreateAccountRequested\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiLoginComponent.prototype, \"onResetPasswordRequested\", void 0);\nNgxAuthFirebaseuiLoginComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-login',\n        template: \"<div fxLayout=\\\"column\\\" id=\\\"login\\\">\\n\\n  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" id=\\\"login-form-wrapper\\\">\\n\\n    <div [@animateStagger]=\\\"{ value: '50' }\\\" id=\\\"login-form\\\">\\n\\n      <div *ngIf=\\\"logoUrl\\\" class=\\\"logo\\\">\\n        <img [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [src]=\\\"logoUrl\\\" alt=\\\"logo\\\">\\n      </div>\\n\\n      <div [@animate]=\\\"{ value: '*', params: { x: '-50px' } }\\\" class=\\\"title\\\">{{titleText}}</div>\\n\\n      <form [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\" [formGroup]=\\\"loginForm\\\" name=\\\"loginForm\\\"\\n            novalidate>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"emailText\\\" formControlName=\\\"email\\\" matInput>\\n          <mat-icon [color]=\\\"color\\\" matSuffix>email</mat-icon>\\n          <mat-error *ngIf=\\\"loginForm.get('email')?.hasError('required')\\\">\\n            {{emailErrorRequiredText}}\\n          </mat-error>\\n          <mat-error\\n            *ngIf=\\\"!loginForm.get('email')?.hasError('required') &&\\n                                loginForm.get('email')?.hasError('email')\\\">\\n            {{emailErrorPatternText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"passwordText\\\" formControlName=\\\"password\\\" matInput type=\\\"password\\\">\\n          <mat-icon [color]=\\\"color\\\" matSuffix>lock</mat-icon>\\n          <mat-error>\\n            {{passwordErrorRequiredText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <div [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\"\\n             class=\\\"remember-forgot-password\\\" fxLayout=\\\"row\\\"\\n             fxLayout.xs=\\\"column\\\"\\n             fxLayoutAlign=\\\"space-between center\\\">\\n          <!--          <mat-checkbox class=\\\"remember-me\\\" aria-label=\\\"Remember Me\\\">-->\\n          <!--            {{rememberMeText}}-->\\n          <!--          </mat-checkbox>-->\\n\\n          <button (click)=\\\"onResetPasswordRequested.emit()\\\"\\n                  *ngIf=\\\"resetPasswordEnabled\\\"\\n                  [@animate]=\\\"{ value: '*', params: { x: '-50px' } }\\\"\\n                  [color]=\\\"color\\\"\\n                  class=\\\"forgot-password\\\"\\n                  mat-button\\n                  type=\\\"button\\\">\\n            {{forgotPasswordText}}\\n          </button>\\n        </div>\\n\\n        <button (click)=\\\"login()\\\"\\n                [color]=\\\"colorAccent\\\"\\n                [disabled]=\\\"loginForm.invalid\\\"\\n                aria-label=\\\"LOG IN\\\"\\n                class=\\\"submit-button\\\"\\n                id=\\\"loginButton\\\"\\n                mat-raised-button>\\n          {{loginButtonText}}\\n        </button>\\n\\n      </form>\\n\\n      <div *ngIf=\\\"providers.length > 0\\\"\\n           [@animate]=\\\"{ value: '*', params: { z: '50px', delay: '50ms', scale: '0.2' } }\\\"\\n           class=\\\"separator\\\">\\n        <span class=\\\"text\\\">{{orLabelText}}</span>\\n      </div>\\n\\n      <ngx-auth-firebaseui-providers [providers]=\\\"providers\\\"\\n                                     fxLayoutAlign=\\\"center center\\\"\\n                                     layout=\\\"column\\\"\\n                                     theme=\\\"raised\\\"></ngx-auth-firebaseui-providers>\\n\\n      <div *ngIf=\\\"registrationEnabled\\\"\\n           [@animateStagger]=\\\"{ value: '100' }\\\"\\n           class=\\\"register\\\"\\n           fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n        <span [@animate]=\\\"{ value: '*', params: { x: '100px' } }\\\" class=\\\"text\\\">\\n          {{dontHaveAnAccountText}}\\n        </span>\\n        <button (click)=\\\"onCreateAccountRequested.emit()\\\"\\n                [@animate]=\\\"{ value: '*', params: { x: '-100px' } }\\\"\\n                [color]=\\\"color\\\"\\n                id=\\\"createAccountButton\\\"\\n                mat-button\\n                type=\\\"button\\\">{{createAccountButtonText}}</button>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        animations: NgxAuthFirebaseuiAnimations,\n        styles: [\"ngx-auth-firebaseui-login #login-form-wrapper{flex:1 0 auto;padding:32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form{width:384px;max-width:384px;padding:32px;text-align:center}ngx-auth-firebaseui-login #login-form-wrapper #login-form .logo{width:150px;height:150px;margin:32px auto}ngx-auth-firebaseui-login #login-form-wrapper #login-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form{width:100%;text-align:left}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-form-field{width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form mat-checkbox{margin:0}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password{font-size:13px;margin-top:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .remember-me{margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .remember-forgot-password .forgot-password{font-size:13px;font-weight:500;margin-bottom:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-login #login-form-wrapper{padding:16px}ngx-auth-firebaseui-login #login-form-wrapper #login-form{padding:24px;width:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form form .submit-button{width:90%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button{width:80%}}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-login #login-form-wrapper #login-form .register .text{margin-right:8px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text{display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after,ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{content:\\\"\\\";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:before{right:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form .separator .text:after{left:100%}ngx-auth-firebaseui-login #login-form-wrapper #login-form button.facebook-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.github-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.google-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.microsoft-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.twitter-raised,ngx-auth-firebaseui-login #login-form-wrapper #login-form button.yahoo-raised{width:192px;text-transform:none;color:#fff;font-size:13px;margin-bottom:8px}\"]\n    }),\n    __param(0, Inject(PLATFORM_ID))\n], NgxAuthFirebaseuiLoginComponent);\n\nconst confirmPasswordValidator = (control) => {\n    if (!control.parent || !control) {\n        return null;\n    }\n    const password = control.parent.get('password');\n    const passwordConfirm = control.parent.get('passwordConfirm');\n    if (!password || !passwordConfirm) {\n        return null;\n    }\n    if (passwordConfirm.value === '') {\n        return null;\n    }\n    if (password.value === passwordConfirm.value) {\n        return null;\n    }\n    return { passwordsNotMatching: true };\n};\nlet NgxAuthFirebaseuiRegisterComponent = class NgxAuthFirebaseuiRegisterComponent {\n    // tslint:disable-next-line:ban-types\n    constructor(platformId, formBuilder, authProcess) {\n        // Configure the layout\n        this.platformId = platformId;\n        this.formBuilder = formBuilder;\n        this.authProcess = authProcess;\n        // i18n common\n        this.titleText = 'CREATE AN ACCOUNT';\n        this.readAndAcceptText = 'I read and accept the';\n        this.termsAndConditionsText = 'terms and conditions';\n        this.privacyPolicyText = 'privacy policy';\n        this.createAccountButtonText = 'CREATE AN ACCOUNT';\n        this.alreadyHaveAccountText = 'Already have an account?';\n        this.loginButtonText = 'LOGIN';\n        // i18n name\n        this.nameText = 'Name';\n        this.nameErrorRequiredText = 'Name is required';\n        // i18n email\n        this.emailText = 'Email';\n        this.emailErrorRequiredText = 'Email is required';\n        this.emailErrorPatternText = 'Please enter a valid email address';\n        // i18n password\n        this.passwordText = 'Password';\n        this.passwordErrorRequiredText = 'Password is required';\n        this.passwordConfirmationText = 'Password Confirmation';\n        this.passwordConfirmationErrorRequiredText = 'Password confirmation is required';\n        this.passwordErrorMatchText = 'Password must match';\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onLoginRequested = new EventEmitter();\n        this.authenticationError = false;\n        // Set the private defaults\n        this.unsubscribeAll = new Subject();\n        this.onSuccess = authProcess.onSuccessEmitter;\n        this.onError = authProcess.onErrorEmitter;\n    }\n    get color() {\n        return this.authenticationError ? 'warn' : 'primary';\n    }\n    get colorAccent() {\n        return this.authenticationError ? 'warn' : 'accent';\n    }\n    ngOnInit() {\n        if (isPlatformBrowser(this.platformId)) {\n            this.onErrorSubscription = this.onError.subscribe(() => this.authenticationError = true);\n        }\n        this.registerForm = this.formBuilder.group({\n            name: ['', Validators.required],\n            email: ['', [Validators.required, Validators.email]],\n            password: ['', Validators.required],\n            passwordConfirm: ['', [Validators.required, confirmPasswordValidator]],\n            tos: [''],\n            privacyPolicy: ['']\n        });\n        // If tos or privacy policy url set, ensure that the two form items are required\n        if (this.tosUrl) {\n            this.registerForm.controls.tos.setValidators(Validators.requiredTrue);\n        }\n        if (this.privacyPolicyUrl) {\n            this.registerForm.controls.privacyPolicy.setValidators(Validators.requiredTrue);\n        }\n        // Update the validity of the 'passwordConfirm' field\n        // when the 'password' field changes\n        this.registerForm\n            .controls\n            .password\n            .valueChanges.pipe(takeUntil(this.unsubscribeAll))\n            .subscribe(() => {\n            this.registerForm.controls.passwordConfirm.updateValueAndValidity();\n        });\n    }\n    /**\n     * On destroy\n     */\n    ngOnDestroy() {\n        // Unsubscribe from all subscriptions\n        this.unsubscribeAll.next();\n        this.unsubscribeAll.complete();\n    }\n    createAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.authProcess.signUp(this.registerForm.controls.name.value, {\n                email: this.registerForm.controls.email.value,\n                password: this.registerForm.controls.password.value\n            });\n        });\n    }\n};\nNgxAuthFirebaseuiRegisterComponent.ctorParameters = () => [\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: FormBuilder },\n    { type: AuthProcessService }\n];\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"logoUrl\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"appearance\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"tosUrl\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"privacyPolicyUrl\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"titleText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"readAndAcceptText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"termsAndConditionsText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"privacyPolicyText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"createAccountButtonText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"alreadyHaveAccountText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"loginButtonText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"nameText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"nameErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"emailText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"emailErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"emailErrorPatternText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"passwordText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"passwordErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"passwordConfirmationText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"passwordConfirmationErrorRequiredText\", void 0);\n__decorate([\n    Input()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"passwordErrorMatchText\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"onSuccess\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"onError\", void 0);\n__decorate([\n    Output()\n], NgxAuthFirebaseuiRegisterComponent.prototype, \"onLoginRequested\", void 0);\nNgxAuthFirebaseuiRegisterComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-register',\n        template: \"<div fxLayout=\\\"column\\\" id=\\\"register\\\">\\n\\n  <div fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\" id=\\\"register-form-wrapper\\\">\\n\\n    <div [@animateStagger]=\\\"{ value: '50' }\\\" id=\\\"register-form\\\">\\n\\n      <div *ngIf=\\\"logoUrl\\\" class=\\\"logo\\\">\\n        <img [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [src]=\\\"logoUrl\\\" alt=\\\"logo\\\">\\n      </div>\\n\\n      <div [@animate]=\\\"{ value: '*', params: { x: '-50px' } }\\\" class=\\\"title\\\">{{titleText}}</div>\\n\\n      <form [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\" [formGroup]=\\\"registerForm\\\" name=\\\"registerForm\\\"\\n            novalidate>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"nameText\\\" formControlName=\\\"name\\\" matInput/>\\n          <mat-icon [color]=\\\"color\\\" matSuffix>person</mat-icon>\\n          <mat-error>\\n            {{nameErrorRequiredText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"emailText\\\" formControlName=\\\"email\\\" matInput/>\\n          <mat-icon [color]=\\\"color\\\" matSuffix>email</mat-icon>\\n          <mat-error *ngIf=\\\"registerForm.get('email')?.hasError('required')\\\">\\n            {{emailErrorRequiredText}}\\n          </mat-error>\\n          <mat-error *ngIf=\\\"registerForm.get('email')?.hasError('email')\\\">\\n            {{emailErrorPatternText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"passwordText\\\" formControlName=\\\"password\\\" matInput type=\\\"password\\\"/>\\n          <mat-icon [color]=\\\"color\\\" matSuffix>lock</mat-icon>\\n          <mat-error>\\n            {{passwordErrorRequiredText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <mat-form-field [@animate]=\\\"{ value: '*', params: { x: '50px' } }\\\" [appearance]=\\\"appearance\\\">\\n          <input [placeholder]=\\\"passwordConfirmationText\\\" formControlName=\\\"passwordConfirm\\\" matInput type=\\\"password\\\"/>\\n          <mat-icon [color]=\\\"color\\\" matSuffix>lock</mat-icon>\\n          <mat-error *ngIf=\\\"registerForm.get('passwordConfirm')?.hasError('required')\\\">\\n            {{passwordConfirmationErrorRequiredText}}\\n          </mat-error>\\n          <mat-error\\n            *ngIf=\\\"\\n              !registerForm.get('passwordConfirm')?.hasError('required') &&\\n              registerForm.get('passwordConfirm')?.hasError('passwordsNotMatching')\\n            \\\">\\n            {{passwordErrorMatchText}}\\n          </mat-error>\\n        </mat-form-field>\\n\\n        <div *ngIf=\\\"this.tosUrl\\\">\\n          <mat-checkbox aria-label=\\\"{{readAndAcceptText}}\\\" formControlName=\\\"tos\\\" required>\\n            <span>{{readAndAcceptText}}</span>\\n            <a target=\\\"_blank\\\" [href]=\\\"this.tosUrl\\\">\\n                {{termsAndConditionsText}}\\n            </a>\\n          </mat-checkbox>\\n        </div>\\n\\n        <div *ngIf=\\\"this.privacyPolicyUrl\\\">\\n          <mat-checkbox aria-label=\\\"{{readAndAcceptText}}\\\" formControlName=\\\"privacyPolicy\\\" required>\\n            <span>{{readAndAcceptText}}</span>\\n            <a target=\\\"_blank\\\" [href]=\\\"this.privacyPolicyUrl\\\">\\n                {{privacyPolicyText}}\\n            </a>\\n          </mat-checkbox>\\n        </div>\\n\\n        <button (click)=\\\"createAccount()\\\"\\n                [color]=\\\"colorAccent\\\"\\n                [disabled]=\\\"registerForm.invalid\\\"\\n                aria-label=\\\"CREATE AN ACCOUNT\\\"\\n                class=\\\"submit-button\\\"\\n                id=\\\"createAccountButton\\\"\\n                mat-raised-button>\\n          {{createAccountButtonText}}\\n        </button>\\n      </form>\\n\\n      <div [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\" class=\\\"register\\\" fxLayout=\\\"column\\\"\\n           fxLayoutAlign=\\\"center center\\\">\\n        <span [@animate]=\\\"{ value: '*', params: { x: '100px' } }\\\" class=\\\"text\\\">\\n          {{alreadyHaveAccountText}}\\n        </span>\\n        <button (click)=\\\"onLoginRequested.emit()\\\"\\n                [@animate]=\\\"{ value: '*', params: { x: '-100px' } }\\\"\\n                [color]=\\\"colorAccent\\\"\\n                id=\\\"loginButton\\\"\\n                mat-button\\n                type=\\\"button\\\">\\n          {{loginButtonText}}\\n        </button>\\n      </div>\\n\\n    </div>\\n  </div>\\n</div>\\n\",\n        encapsulation: ViewEncapsulation.None,\n        animations: NgxAuthFirebaseuiAnimations,\n        styles: [\"ngx-auth-firebaseui-register #register{width:100%;background-size:cover}ngx-auth-firebaseui-register #register #register-form-wrapper{flex:1 0 auto;padding:32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{width:384px;max-width:384px;padding:32px;text-align:center}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .logo{width:128px;margin:32px auto}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .title{font-size:20px;margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form{width:100%;text-align:left}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-form-field{width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form mat-checkbox{margin:0}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms{margin:16px 0 32px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .terms a{font-size:16px;margin-left:4px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:220px;margin:16px auto;display:block}@media screen and (max-width:599px){ngx-auth-firebaseui-register #register #register-form-wrapper{padding:16px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form{padding:24px;width:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form form .submit-button{width:90%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button{width:80%}}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register{margin:32px auto 24px;font-weight:500}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .register .text{margin-right:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator{font-size:15px;font-weight:600;margin:24px auto;position:relative;overflow:hidden;width:100px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text{display:inline-flex;position:relative;padding:0 8px;z-index:9999}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{content:\\\"\\\";display:block;width:30px;position:absolute;top:10px;border-top:1px solid}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:before{right:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form .separator .text:after{left:100%}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook,ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{width:192px;text-transform:none;color:#fff;font-size:13px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.google{background-color:#d73d32;margin-bottom:8px}ngx-auth-firebaseui-register #register #register-form-wrapper #register-form button.facebook{background-color:#3f5c9a}ngx-auth-firebaseui-register ::ng-deep .mat-checkbox-label{display:flex;flex-wrap:wrap}\"]\n    }),\n    __param(0, Inject(PLATFORM_ID))\n], NgxAuthFirebaseuiRegisterComponent);\n\nlet UserComponent = class UserComponent {\n    constructor(auth, authProcess, fireStoreService, config) {\n        this.auth = auth;\n        this.authProcess = authProcess;\n        this.fireStoreService = fireStoreService;\n        this.config = config;\n        this.canLogout = true;\n        this.canEditAccount = true;\n        this.canDeleteAccount = true;\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onSignOut = new EventEmitter();\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onAccountEdited = new EventEmitter();\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onAccountDeleted = new EventEmitter();\n    }\n    changeEditMode() {\n        if (this.editMode) {\n            this.reset();\n            this.editMode = false;\n        }\n        else {\n            this.initUpdateFormGroup().subscribe((updateFormGroup) => {\n                this.updateFormGroup = updateFormGroup;\n                this.editMode = true;\n            });\n        }\n    }\n    reset() {\n        this.updateFormGroup.reset();\n        this.updateFormGroup.disable();\n        this.updateFormGroup = null;\n    }\n    save() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.updateFormGroup.dirty) {\n                this.editMode = false;\n                const user = this.authProcess.user;\n                // ngx-auth-firebaseui-user.updateProfile()\n                // ngx-auth-firebaseui-user.updateEmail()\n                // console.log('form = ', this.updateFormGroup);\n                const snackBarMsg = [];\n                try {\n                    if (this.updateNameFormControl.dirty) {\n                        yield user.updateProfile({ displayName: this.updateNameFormControl.value });\n                        snackBarMsg.push(`your name has been updated to ${user.displayName}`);\n                    }\n                    if (this.updateEmailFormControl.dirty) {\n                        yield user.updateEmail(this.updateEmailFormControl.value);\n                        snackBarMsg.push(`your email has been updated to ${user.email}`);\n                    }\n                    if (this.updatePhoneNumberFormControl.dirty) {\n                        yield user.updatePhoneNumber(this.updatePhoneNumberFormControl.value);\n                        console.log('phone number = ', this.updatePhoneNumberFormControl.value);\n                        snackBarMsg.push(`your phone number has been updated to ${user.phoneNumber}`);\n                    }\n                    if (this.config.enableFirestoreSync) {\n                        yield this.fireStoreService.updateUserData(this.authProcess.parseUserInfo(user));\n                    }\n                }\n                catch (error) {\n                    this.authProcess.showToast(error && error.message ? error.message : error);\n                    console.error(error);\n                }\n                if (snackBarMsg.length > 0) {\n                    this.authProcess.showToast(snackBarMsg.join('\\\\n'));\n                }\n                this.updateFormGroup.reset();\n            }\n        });\n    }\n    signOut() {\n        this.auth.signOut()\n            .then(() => this.onSignOut.emit())\n            .catch(e => console.error('An error happened while signing out!', e));\n    }\n    /**\n     * Delete the account of the current firebase ngx-auth-firebaseui-user\n     *\n     * On Success, emit the <onAccountDeleted> event and toast a msg!#\n     * Otherwise, log the and toast and error msg!\n     *\n     */\n    deleteAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const user = this.authProcess.user;\n                // await this.authProcess.deleteAccount();\n                yield this.authProcess.user.delete();\n                // if (this.config.enableFirestoreSync) {\n                yield this.fireStoreService.deleteUserData(user.uid);\n                // }\n                this.onAccountDeleted.emit();\n                this.editMode = false;\n                console.log('Your account has been successfully deleted!');\n                this.authProcess.showToast('Your account has been successfully deleted!');\n            }\n            catch (error) {\n                console.log('Error while delete user account', error);\n                this.authProcess.showToast(`Error occurred while deleting your account: ${error.message}`);\n            }\n        });\n    }\n    initUpdateFormGroup() {\n        return this.authProcess.user$.pipe(take(1), map((currentUser) => {\n            const updateFormGroup = new FormGroup({\n                name: this.updateNameFormControl = new FormControl({ value: currentUser.displayName, disabled: this.editMode }, [\n                    Validators.required,\n                    Validators.minLength(this.config.nameMinLength),\n                    Validators.maxLength(this.config.nameMaxLength)\n                ]),\n                email: this.updateEmailFormControl = new FormControl({ value: currentUser.email, disabled: this.editMode }, [\n                    Validators.required,\n                    Validators.pattern(EMAIL_REGEX)\n                ]),\n                phoneNumber: this.updatePhoneNumberFormControl = new FormControl({ value: currentUser.phoneNumber, disabled: this.editMode }, [Validators.pattern(PHONE_NUMBER_REGEX)])\n            });\n            updateFormGroup.enable();\n            return updateFormGroup;\n        }));\n    }\n};\nUserComponent.ctorParameters = () => [\n    { type: AngularFireAuth },\n    { type: AuthProcessService },\n    { type: FirestoreSyncService },\n    { type: undefined, decorators: [{ type: Inject, args: [forwardRef(() => NgxAuthFirebaseUIConfigToken),] }] }\n];\n__decorate([\n    Input()\n], UserComponent.prototype, \"editMode\", void 0);\n__decorate([\n    Input()\n], UserComponent.prototype, \"canLogout\", void 0);\n__decorate([\n    Input()\n], UserComponent.prototype, \"canEditAccount\", void 0);\n__decorate([\n    Input()\n], UserComponent.prototype, \"canDeleteAccount\", void 0);\n__decorate([\n    Input()\n], UserComponent.prototype, \"appearance\", void 0);\n__decorate([\n    Output()\n], UserComponent.prototype, \"onSignOut\", void 0);\n__decorate([\n    Output()\n], UserComponent.prototype, \"onAccountEdited\", void 0);\n__decorate([\n    Output()\n], UserComponent.prototype, \"onAccountDeleted\", void 0);\nUserComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-user',\n        template: \"<div *ngIf=\\\"auth.authState| async; then authenticated else none\\\">\\n\\n</div>\\n\\n<ng-template #authenticated>\\n  <mat-card *ngIf=\\\"auth.user | async as user\\\">\\n    <!--<form [formGroup]=\\\"updateFormGroup\\\" >-->\\n    <!--card header-->\\n    <mat-card-header fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n\\n      <img *ngIf=\\\"authProcess?.getUserPhotoUrl() | async as photoUrl\\\" [src]=\\\"photoUrl\\\" mat-card-avatar>\\n\\n      <div *ngIf=\\\"user.emailVerified; then emailVerified else emailNotVerified\\\"></div>\\n      <ng-template #emailVerified>\\n        <mat-icon color=\\\"primary\\\"\\n                  matTooltip=\\\"email is verified\\\"\\n                  matTooltipPosition=\\\"after\\\">\\n          verified_user\\n        </mat-icon>\\n      </ng-template>\\n      <ng-template #emailNotVerified>\\n        <mat-icon color=\\\"warn\\\"\\n                  matTooltip=\\\"email is not verified\\\"\\n                  matTooltipPosition=\\\"after\\\">\\n          warning\\n        </mat-icon>\\n      </ng-template>\\n\\n    </mat-card-header>\\n\\n    <!--card content-->\\n    <mat-card-content *ngIf=\\\"editMode; then edit else readonly\\\">\\n    </mat-card-content>\\n\\n    <ng-template #edit>\\n      <form (submit)=\\\"save()\\\" [formGroup]=\\\"updateFormGroup\\\">\\n\\n        <mat-card-content fxLayout=\\\"column\\\" fxLayoutAlign=\\\"center center\\\">\\n          <div fxLayoutAlign=\\\"center\\\">\\n            <button (click)=\\\"changeEditMode()\\\" class=\\\"edit-button\\\" color=\\\"warn\\\"\\n                    mat-raised-button>\\n              cancel\\n            </button>\\n          </div>\\n\\n          <!--name-->\\n          <mat-form-field [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n            <mat-label>Name</mat-label>\\n            <input [formControl]=\\\"updateNameFormControl\\\"\\n                   matInput\\n                   placeholder=\\\"Name\\\">\\n            <mat-icon matSuffix>person</mat-icon>\\n            <mat-hint align=\\\"end\\\" aria-live=\\\"polite\\\"> {{ updateNameFormControl.value?.length }}\\n              / {{ config.nameMaxLength }} </mat-hint>\\n            <mat-error *ngIf=\\\"updateNameFormControl.hasError('required')\\\">\\n              Name is required\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <!--email-->\\n          <mat-form-field [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n            <mat-label>E-mail</mat-label>\\n            <input [formControl]=\\\"updateEmailFormControl\\\"\\n                   matInput\\n                   placeholder=\\\"E-mail\\\">\\n            <mat-icon matSuffix>email</mat-icon>\\n            <mat-error *ngIf=\\\"updateEmailFormControl.hasError('required')\\\">\\n              E-mail is required {{updateEmailFormControl.value}}\\n            </mat-error>\\n            <mat-error *ngIf=\\\"updateEmailFormControl.hasError('pattern')\\\">\\n              Please enter a valid e-mail address {{updateEmailFormControl.value}}\\n            </mat-error>\\n          </mat-form-field>\\n\\n          <!--phone number-->\\n          <mat-form-field *ngIf=\\\"false\\\" [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n            <mat-label>Phone number</mat-label>\\n            <input [formControl]=\\\"updatePhoneNumberFormControl\\\"\\n                   matInput\\n                   placeholder=\\\"Phone number\\\"\\n                   type=\\\"tel\\\">\\n            <mat-icon matSuffix>phone</mat-icon>\\n            <mat-hint align=\\\"end\\\" aria-live=\\\"polite\\\">\\n              The phone number is international. Therefore, it should start with a + sign or 00,\\n              followed by the country code, - and national number e.g: +49-12345678 or 0041-1234567890\\n\\n              NOTE : the phone number must be a valid phone credential !!\\n            </mat-hint>\\n            <mat-error *ngIf=\\\"updatePhoneNumberFormControl.hasError('pattern')\\\">\\n              Please enter a valid phone number\\n            </mat-error>\\n          </mat-form-field>\\n\\n        </mat-card-content>\\n\\n        <mat-card-actions fxLayout=\\\"column\\\">\\n          <button color=\\\"primary\\\"\\n                  mat-button\\n                  type=\\\"submit\\\">\\n            Save changes\\n          </button>\\n        </mat-card-actions>\\n      </form>\\n    </ng-template>\\n\\n    <ng-template #readonly>\\n      <div fxLayoutAlign=\\\"center\\\">\\n        <button *ngIf=\\\"canEditAccount\\\" (click)=\\\"changeEditMode()\\\" class=\\\"edit-button\\\" color=\\\"primary\\\"\\n                mat-raised-button>\\n          edit\\n        </button>\\n      </div>\\n\\n      <!--name-->\\n      <mat-form-field [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n        <mat-label>Name</mat-label>\\n        <input [disabled]=\\\"!editMode\\\"\\n               [value]=\\\"user.displayName\\\"\\n               matInput\\n               placeholder=\\\"Name\\\">\\n        <mat-icon color=\\\"primary\\\" matSuffix>person</mat-icon>\\n      </mat-form-field>\\n\\n      <!--email-->\\n      <mat-form-field [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n        <mat-label>E-mail</mat-label>\\n        <input [disabled]=\\\"!editMode\\\"\\n               [value]=\\\"user.email\\\" matInput\\n               placeholder=\\\"E-mail\\\">\\n        <mat-icon color=\\\"primary\\\" matSuffix>email</mat-icon>\\n      </mat-form-field>\\n\\n      <!--phone number-->\\n      <mat-form-field *ngIf=\\\"false\\\" [appearance]=\\\"appearance\\\" class=\\\"full-width\\\">\\n        <mat-label>Phone number</mat-label>\\n        <input [disabled]=\\\"!editMode\\\"\\n               [value]=\\\"user.phoneNumber\\\"\\n               matInput\\n               placeholder=\\\"Phone number\\\">\\n        <mat-icon color=\\\"primary\\\" matSuffix>phone</mat-icon>\\n      </mat-form-field>\\n\\n      <mat-card-actions fxLayout=\\\"column\\\">\\n        <button (click)=\\\"signOut()\\\" *ngIf=\\\"canLogout\\\" color=\\\"primary\\\" mat-button>Sign out</button>\\n        <button (click)=\\\"deleteAccount()\\\" *ngIf=\\\"canDeleteAccount\\\" color=\\\"warn\\\" mat-button>Delete account</button>\\n      </mat-card-actions>\\n\\n    </ng-template>\\n\\n  </mat-card>\\n\\n</ng-template>\\n\\n\\n<ng-template #none>\\n  <mat-card class=\\\"none-card\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n    <mat-card-content fxLayout=\\\"row\\\" fxLayoutAlign=\\\"center center\\\">\\n      <mat-icon color=\\\"accent\\\">warning</mat-icon>\\n      <span>You are not logged in!</span>\\n    </mat-card-content>\\n  </mat-card>\\n</ng-template>\\n\",\n        styles: [\".edit-button{margin:1rem}.full-width{width:100%}.cut-text{text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.none-card{min-height:430px}.none-card span{font-size:24px;text-align:center;color:rgba(0,0,0,.54)}\"]\n    }),\n    __param(3, Inject(forwardRef(() => NgxAuthFirebaseUIConfigToken)))\n], UserComponent);\n\nvar Theme;\n(function (Theme) {\n    Theme[\"DEFAULT\"] = \"default\";\n    Theme[\"CLASSIC\"] = \"classic\";\n    Theme[\"STROKED\"] = \"stroked\";\n    Theme[\"FAB\"] = \"fab\";\n    Theme[\"MINI_FAB\"] = \"mini-fab\";\n    Theme[\"RAISED\"] = \"raised\";\n})(Theme || (Theme = {}));\nvar Layout;\n(function (Layout) {\n    Layout[\"ROW\"] = \"row\";\n    Layout[\"COLUMN\"] = \"column\";\n})(Layout || (Layout = {}));\nlet AuthProvidersComponent = class AuthProvidersComponent {\n    constructor(authProcess, dialog) {\n        this.authProcess = authProcess;\n        this.dialog = dialog;\n        this.layout = Layout.ROW;\n        this.providers = AuthProvider.ALL; //  google, facebook, twitter, github, microsoft, yahoo\n        this.themes = Theme;\n        this.authProvider = AuthProvider;\n        this.onSuccess = authProcess.onSuccessEmitter;\n        this.onError = authProcess.onErrorEmitter;\n    }\n    processLegalSignUP(authProvider) {\n        if (this.tosUrl || this.privacyPolicyUrl) {\n            const params = {\n                tosUrl: this.tosUrl,\n                privacyPolicyUrl: this.privacyPolicyUrl,\n                authProvider\n            };\n            this.dialogRef = this.dialog.open(LegalityDialogComponent, { data: params });\n            this.dialogRef.afterClosed().subscribe((result) => {\n                if (result && result.checked) {\n                    // this._afterSignUpMiddleware(result.authProvider).then(() => this.signUpFormGroup.reset());\n                    this.authProcess.signInWith(authProvider);\n                }\n                this.dialogRef = null;\n            });\n        }\n        else {\n            // this._afterSignUpMiddleware(authProvider).then(() => this.signUpFormGroup.reset());\n            this.authProcess.signInWith(authProvider);\n        }\n    }\n};\nAuthProvidersComponent.ctorParameters = () => [\n    { type: AuthProcessService },\n    { type: MatDialog }\n];\n__decorate([\n    Input()\n], AuthProvidersComponent.prototype, \"theme\", void 0);\n__decorate([\n    Input()\n], AuthProvidersComponent.prototype, \"layout\", void 0);\n__decorate([\n    Input()\n], AuthProvidersComponent.prototype, \"providers\", void 0);\n__decorate([\n    Output()\n], AuthProvidersComponent.prototype, \"onSuccess\", void 0);\n__decorate([\n    Output()\n], AuthProvidersComponent.prototype, \"onError\", void 0);\n__decorate([\n    Input()\n], AuthProvidersComponent.prototype, \"tosUrl\", void 0);\n__decorate([\n    Input()\n], AuthProvidersComponent.prototype, \"privacyPolicyUrl\", void 0);\nAuthProvidersComponent = __decorate([\n    Component({\n        selector: 'ngx-auth-firebaseui-providers',\n        template: \"<div [@animateStagger]=\\\"{ value: '50' }\\\" [ngSwitch]=\\\"theme\\\">\\n\\n  <!--default icon buttons-->\\n  <div *ngSwitchDefault\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       fxLayout.xs=\\\"column\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"google-colored\\\"></mat-icon>\\n      Google\\n    </button>\\n\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"apple-filled\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"apple\\\"></mat-icon>\\n      Apple\\n    </button>\\n\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"facebook-filled\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"facebook\\\"></mat-icon>\\n      Facebook\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"twitter-filled\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"twitter\\\"></mat-icon>\\n      Twitter\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"github\\\"></mat-icon>\\n      GitHub\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"microsoft\\\"></mat-icon>\\n      Microsoft\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            mat-button>\\n      <mat-icon svgIcon=\\\"yahoo\\\"></mat-icon>\\n      Yahoo\\n    </button>\\n  </div>\\n\\n  <!--classic-->\\n  <div *ngSwitchCase=\\\"themes.CLASSIC\\\"\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       class=\\\"buttons-classic\\\"\\n       fxLayout.xs=\\\"column\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"google-classic\\\"\\n            mat-button>\\n      Google\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"apple-classic\\\"\\n            mat-button>\\n      Apple\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"facebook-classic\\\"\\n            mat-button>\\n      Facebook\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"twitter-classic\\\"\\n            mat-button>\\n      Twitter\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"github-classic\\\"\\n            mat-button>\\n      GitHub\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"microsoft-classic\\\"\\n            mat-button>\\n      Microsoft\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"yahoo-classic\\\"\\n            mat-button>\\n      Yahoo\\n    </button>\\n  </div>\\n\\n  <!--stroked-->\\n  <div *ngSwitchCase=\\\"themes.STROKED\\\"\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       class=\\\"buttons-classic\\\"\\n       fxLayout.xs=\\\"column\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"google-classic\\\"\\n            mat-stroked-button>\\n      Google\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"apple-classic\\\"\\n            mat-stroked-button>\\n      Apple\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"facebook-classic\\\"\\n            mat-stroked-button>\\n      Facebook\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"twitter-classic\\\"\\n            mat-stroked-button>\\n      Twitter\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"github-classic\\\"\\n            mat-stroked-button>\\n      GitHub\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"microsoft-classic\\\"\\n            mat-stroked-button>\\n      Microsoft\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"yahoo-classic\\\"\\n            mat-stroked-button>\\n      Yahoo\\n    </button>\\n  </div>\\n\\n  <!--raised-->\\n  <div *ngSwitchCase=\\\"themes.RAISED\\\"\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       class=\\\"buttons-raised\\\"\\n       fxLayout.xs=\\\"column\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"google-raised\\\"\\n            mat-raised-button>\\n      Google\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"apple-raised\\\"\\n            mat-raised-button>\\n      Apple\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"facebook-raised\\\"\\n            mat-raised-button>\\n      Facebook\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"twitter-raised\\\"\\n            mat-raised-button>\\n      Twitter\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"github-raised\\\"\\n            mat-raised-button>\\n      GitHub\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"microsoft-raised\\\"\\n            mat-raised-button>\\n      Microsoft\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            [ngClass.xs]=\\\"{'space-full-xs':true}\\\"\\n            class=\\\"yahoo-raised\\\"\\n            mat-raised-button>\\n      Yahoo\\n    </button>\\n  </div>\\n\\n  <!--fab-->\\n  <div *ngSwitchCase=\\\"themes.FAB\\\"\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       class=\\\"buttons-raised\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"google-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"google\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"apple-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"apple\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"facebook-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"facebook\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"twitter-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"twitter\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"github-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"github\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"microsoft\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"microsoft\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"yahoo-raised\\\"\\n            mat-fab>\\n      <mat-icon svgIcon=\\\"yahoo\\\"></mat-icon>\\n    </button>\\n  </div>\\n\\n  <!--mini-fab-->\\n  <div *ngSwitchCase=\\\"themes.MINI_FAB\\\"\\n       [fxLayoutAlign]=\\\"layout == 'row' ? 'space-around center' : 'stretch'\\\"\\n       [fxLayout]=\\\"layout\\\"\\n       class=\\\"buttons-raised\\\"\\n       fxLayoutAlign.xs=\\\"center center\\\">\\n    <button (click)=\\\"processLegalSignUP(authProvider.Google)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Google)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"google-raised\\\"\\n            fxFlexAlign=\\\"center\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"google\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Apple)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Apple)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"apple-raised\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"apple\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Facebook)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Facebook)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"facebook-raised\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"facebook\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Twitter)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Twitter)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"twitter-raised\\\"\\n            mat-mini-fab>\\n      <mat-icon class=\\\"icon-white\\\" svgIcon=\\\"twitter\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Github)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Github)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"github-raised\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"github\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Microsoft)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Microsoft)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"microsoft\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"microsoft\\\"></mat-icon>\\n    </button>\\n    <button (click)=\\\"processLegalSignUP(authProvider.Yahoo)\\\"\\n            *ngIf=\\\"providers === authProvider.ALL || providers.includes(authProvider.Yahoo)\\\"\\n            [@animate]=\\\"{value:'*',params:{duration:'300ms',y:'100px'}}\\\"\\n            class=\\\"yahoo-raised\\\"\\n            mat-mini-fab>\\n      <mat-icon svgIcon=\\\"yahoo\\\"></mat-icon>\\n    </button>\\n  </div>\\n</div>\\n\",\n        animations: NgxAuthFirebaseuiAnimations,\n        styles: [\":host{display:block}.space-full-xs{width:100%;margin:.4rem}.apple-filled mat-icon svg path{fill:#000}.facebook-filled mat-icon{fill:#385899}.twitter-filled mat-icon{fill:#1da1f2}.buttons-raised button{color:#fff!important}.buttons-raised .google-raised{background-color:#db4437}.buttons-raised .apple-raised{background-color:#000}.buttons-raised .facebook-raised{background-color:#385899}.buttons-raised .twitter-raised{background-color:#1da1f2}.buttons-raised .github-raised{background-color:#000}.buttons-raised .microsoft-raised{background-color:#0078d4}.buttons-raised .yahoo-raised{background-color:#720e9e}.buttons-raised .phone-raised{background-color:#02bd7e}.buttons-classic button.google-classic{color:#db4437!important}.buttons-classic button.apple-classic{color:#000!important}.buttons-classic .facebook-classic{color:#385899!important}.buttons-classic .twitter-classic{color:#1da1f2!important}.buttons-classic .github-classic{color:#000!important}.buttons-classic .microsoft-classic{color:#0078d4!important}.buttons-classic .yahoo-classic{color:#720e9e!important}.buttons-classic .phone-classic{color:#02bd7e}.icon-white{color:#fff}.icon-white mat-icon{fill:#fff}button.microsoft{background:#f8f9fa}\"]\n    })\n], AuthProvidersComponent);\n\n// import * as firebase from 'firebase';\nconst defaultAuthFirebaseUIConfig = {\n    // authMethod: 'redirect',\n    // authProviders: [new GoogleAuthProvider(), new FacebookAuthProvider(), new TwitterAuthProvider(), new GithubAuthProvider()],\n    enableFirestoreSync: true,\n    toastMessageOnAuthSuccess: true,\n    toastMessageOnAuthError: true,\n    authGuardFallbackURL: '/',\n    authGuardLoggedInURL: '/',\n    // Password length min/max in forms independently of each componenet min/max.\n    // `min/max` input parameters in components should be within this range.\n    passwordMaxLength: 60,\n    passwordMinLength: 8,\n    // Same as password but for the name\n    nameMaxLength: 50,\n    nameMinLength: 2,\n    // If set, sign-in/up form is not available until email has been verified.\n    // Plus protected routes are still protected even though user is connected.\n    guardProtectedRoutesUntilEmailIsVerified: true,\n    // Default to email verification on\n    enableEmailVerification: true\n};\n// Merge default config with user provided config.\nfunction ngxAuthFirebaseUIConfigFactory(userProvidedConfig) {\n    return Object.assign({}, defaultAuthFirebaseUIConfig, userProvidedConfig);\n}\n\nlet LoggedInGuard = class LoggedInGuard {\n    constructor(config, router, authProcess) {\n        this.config = config;\n        this.router = router;\n        this.authProcess = authProcess;\n    }\n    canActivate(route, state) {\n        return this.authProcess.afa.user.pipe(map(user => {\n            if (user) {\n                if (this.config.guardProtectedRoutesUntilEmailIsVerified && !user.emailVerified && !user.isAnonymous) {\n                    if (this.config.authGuardFallbackURL) {\n                        this.router.navigate([`${this.config.authGuardFallbackURL}`], { queryParams: { redirectUrl: state.url } });\n                    }\n                    return false;\n                }\n                else {\n                    return true;\n                }\n            }\n            else {\n                if (this.config.authGuardFallbackURL) {\n                    this.router.navigate([`/${this.config.authGuardFallbackURL}`], { queryParams: { redirectUrl: state.url } });\n                }\n                return false;\n            }\n        }));\n    }\n};\nLoggedInGuard.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [NgxAuthFirebaseUIConfigToken,] }] },\n    { type: Router },\n    { type: AuthProcessService }\n];\nLoggedInGuard.ɵprov = ɵɵdefineInjectable({ factory: function LoggedInGuard_Factory() { return new LoggedInGuard(ɵɵinject(NgxAuthFirebaseUIConfigToken), ɵɵinject(Router), ɵɵinject(AuthProcessService)); }, token: LoggedInGuard, providedIn: \"root\" });\nLoggedInGuard = __decorate([\n    Injectable({\n        providedIn: 'root'\n    }),\n    __param(0, Inject(NgxAuthFirebaseUIConfigToken))\n], LoggedInGuard);\n\nvar NgxAuthFirebaseUIModule_1;\nlet NgxAuthFirebaseUIModule = NgxAuthFirebaseUIModule_1 = class NgxAuthFirebaseUIModule {\n    constructor(iconRegistry, sanitizer, auth) {\n        this.iconRegistry = iconRegistry;\n        this.sanitizer = sanitizer;\n        auth.listenToUserEvents();\n        this.registerProviderIcons();\n    }\n    static forRoot(configFactory, appNameFactory = () => undefined, config = {}) {\n        return {\n            ngModule: NgxAuthFirebaseUIModule_1,\n            providers: [\n                {\n                    provide: FIREBASE_OPTIONS,\n                    useValue: configFactory\n                },\n                {\n                    provide: FIREBASE_APP_NAME,\n                    useFactory: appNameFactory\n                },\n                { provide: UserProvidedConfigToken, useValue: config },\n                {\n                    provide: NgxAuthFirebaseUIConfigToken,\n                    useFactory: ngxAuthFirebaseUIConfigFactory,\n                    deps: [UserProvidedConfigToken]\n                },\n                AuthProcessService,\n                FirestoreSyncService,\n                LoggedInGuard\n            ]\n        };\n    }\n    registerProviderIcons() {\n        this.iconRegistry\n            .addSvgIcon('google', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/google.svg'))\n            .addSvgIcon('apple', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/apple.svg'))\n            .addSvgIcon('google-colored', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/google.svg'))\n            .addSvgIcon('facebook', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/facebook.svg'))\n            .addSvgIcon('twitter', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/twitter.svg'))\n            .addSvgIcon('github', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/github-circle.svg'))\n            .addSvgIcon('microsoft', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/microsoft.svg'))\n            .addSvgIcon('yahoo', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/mdi/yahoo.svg'))\n            .addSvgIcon('phone', this.sanitizer.bypassSecurityTrustResourceUrl('/assets/phone.svg'));\n    }\n};\nNgxAuthFirebaseUIModule.ctorParameters = () => [\n    { type: MatIconRegistry },\n    { type: DomSanitizer },\n    { type: AuthProcessService }\n];\nNgxAuthFirebaseUIModule = NgxAuthFirebaseUIModule_1 = __decorate([\n    NgModule({\n        imports: [\n            CommonModule,\n            // HTTP\n            RouterModule,\n            HttpClientModule,\n            // FLEX_LAYOUT\n            FlexLayoutModule,\n            // FORMS\n            FormsModule,\n            ReactiveFormsModule,\n            // MATERIAL2\n            MatTabsModule,\n            MatCardModule,\n            MatInputModule,\n            MatButtonModule,\n            MatIconModule,\n            MatSnackBarModule,\n            MatDividerModule,\n            MatChipsModule,\n            MatTooltipModule,\n            MatDialogModule,\n            MatCheckboxModule,\n            MatProgressSpinnerModule,\n            MatProgressBarModule,\n            MatDialogModule,\n            MatMenuModule,\n            // ANGULAR MATERIAL EXTENSIONS\n            MatPasswordStrengthModule,\n            // ANGULARFIRE2\n            AngularFireAuthModule,\n            AngularFirestoreModule,\n        ],\n        exports: [\n            AuthComponent,\n            UserComponent,\n            NgxAuthFirebaseuiAvatarComponent,\n            AuthProvidersComponent,\n            EmailConfirmationComponent,\n            // LoggedInGuard,\n            AngularFireAuthModule,\n            AngularFirestoreModule,\n            NgxAuthFirebaseuiLoginComponent,\n            NgxAuthFirebaseuiRegisterComponent\n        ],\n        declarations: [\n            AuthComponent,\n            UserComponent,\n            NgxAuthFirebaseuiAvatarComponent,\n            AuthProvidersComponent,\n            EmailConfirmationComponent,\n            LegalityDialogComponent,\n            NgxAuthFirebaseuiLoginComponent,\n            NgxAuthFirebaseuiRegisterComponent\n        ],\n        entryComponents: [\n            UserComponent,\n            LegalityDialogComponent\n        ]\n    })\n], NgxAuthFirebaseUIModule);\n\n/*\n * Public API Surface of ngx-auth-firebaseui\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { Accounts, AuthComponent, AuthProcessService, AuthProvider, AuthProvidersComponent, EMAIL_REGEX, EmailConfirmationComponent, FirestoreSyncService, Layout, LegalityDialogComponent, LoggedInGuard, NgxAuthFirebaseUIConfigToken, NgxAuthFirebaseUIModule, NgxAuthFirebaseuiAvatarComponent, NgxAuthFirebaseuiLoginComponent, NgxAuthFirebaseuiRegisterComponent, PHONE_NUMBER_REGEX, Theme, UserComponent, UserProvidedConfigToken, appleAuthProvider, collections, confirmPasswordValidator, defaultAuthFirebaseUIConfig, facebookAuthProvider, githubAuthProvider, googleAuthProvider, microsoftAuthProvider, ngxAuthFirebaseUIConfigFactory, twitterAuthProvider, yahooAuthProvider, defaultAuthFirebaseUIConfig as ɵa, ngxAuthFirebaseUIConfigFactory as ɵb, NgxAuthFirebaseuiAnimations as ɵd, EmailConfirmationComponent as ɵe };\n"]}