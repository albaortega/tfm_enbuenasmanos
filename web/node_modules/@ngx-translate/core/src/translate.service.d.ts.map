{"version":3,"file":"translate.service.d.ts","sources":["/Users/albaortegaflores/Documentos/TFM/code/web/node_modules/@ngx-translate/core/src/translate.service.d.ts"],"sourcesContent":["import { EventEmitter, InjectionToken } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { MissingTranslationHandler } from \"./missing-translation-handler\";\r\nimport { TranslateCompiler } from \"./translate.compiler\";\r\nimport { TranslateLoader } from \"./translate.loader\";\r\nimport { TranslateParser } from \"./translate.parser\";\r\nimport { TranslateStore } from \"./translate.store\";\r\nexport declare const USE_STORE: InjectionToken<string>;\r\nexport declare const USE_DEFAULT_LANG: InjectionToken<string>;\r\nexport interface TranslationChangeEvent {\r\n    translations: any;\r\n    lang: string;\r\n}\r\nexport interface LangChangeEvent {\r\n    lang: string;\r\n    translations: any;\r\n}\r\nexport interface DefaultLangChangeEvent {\r\n    lang: string;\r\n    translations: any;\r\n}\r\nexport declare class TranslateService {\r\n    store: TranslateStore;\r\n    currentLoader: TranslateLoader;\r\n    compiler: TranslateCompiler;\r\n    parser: TranslateParser;\r\n    missingTranslationHandler: MissingTranslationHandler;\r\n    private useDefaultLang;\r\n    private isolate;\r\n    private loadingTranslations;\r\n    private pending;\r\n    private _onTranslationChange;\r\n    private _onLangChange;\r\n    private _onDefaultLangChange;\r\n    private _defaultLang;\r\n    private _currentLang;\r\n    private _langs;\r\n    private _translations;\r\n    private _translationRequests;\r\n    readonly onTranslationChange: EventEmitter<TranslationChangeEvent>;\r\n    readonly onLangChange: EventEmitter<LangChangeEvent>;\r\n    readonly onDefaultLangChange: EventEmitter<DefaultLangChangeEvent>;\r\n    defaultLang: string;\r\n    currentLang: string;\r\n    langs: string[];\r\n    translations: any;\r\n    constructor(store: TranslateStore, currentLoader: TranslateLoader, compiler: TranslateCompiler, parser: TranslateParser, missingTranslationHandler: MissingTranslationHandler, useDefaultLang?: boolean, isolate?: boolean);\r\n    setDefaultLang(lang: string): void;\r\n    getDefaultLang(): string;\r\n    use(lang: string): Observable<any>;\r\n    private retrieveTranslations(lang);\r\n    getTranslation(lang: string): Observable<any>;\r\n    setTranslation(lang: string, translations: Object, shouldMerge?: boolean): void;\r\n    getLangs(): Array<string>;\r\n    addLangs(langs: Array<string>): void;\r\n    private updateLangs();\r\n    getParsedResult(translations: any, key: any, interpolateParams?: Object): any;\r\n    get(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\r\n    stream(key: string | Array<string>, interpolateParams?: Object): Observable<string | any>;\r\n    instant(key: string | Array<string>, interpolateParams?: Object): string | any;\r\n    set(key: string, value: string, lang?: string): void;\r\n    private changeLang(lang);\r\n    private changeDefaultLang(lang);\r\n    reloadLang(lang: string): Observable<any>;\r\n    resetLang(lang: string): void;\r\n    getBrowserLang(): string;\r\n    getBrowserCultureLang(): string;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4DA;"}